// !!!DO NOT EDIT THIS FILE BY HAND!!!
// Create this file by running MethodGen.exe in the rhinocommon directory
// MethodGen.exe parses the cpp files in rhcommon_c to create C# callable
// function declarations

using System;
using System.Runtime.InteropServices;
using Rhino;
using Rhino.Geometry;
using Rhino.Geometry.Intersect;
using Rhino.Collections;
using Rhino.Display;
using Rhino.Runtime.InteropWrappers;

// Atuomatically generated function declarations for calling into
// the support 'C' DLL (rhcommon_c.dll).
internal partial class UnsafeNativeMethods
{
  private UnsafeNativeMethods(){}
  #region on_3dm_attributes.cpp
  //ON_3dmObjectAttributes* ON_3dmObjectAttributes_New(const ON_3dmObjectAttributes* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmObjectAttributes_New(IntPtr pOther);

  //int ON_3dmObjectAttributes_GetSetInt( ON_3dmObjectAttributes* ptr, int which, bool set, int set_value )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dmObjectAttributes_GetSetInt(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //bool ON_3dmObjectAttributes_GetSetBool( ON_3dmObjectAttributes* ptr, int which, bool set, bool set_value )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dmObjectAttributes_GetSetBool(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool set_value);

  //ON_UUID ON_3dmObjectAttributes_m_uuid(const ON_3dmObjectAttributes* pConstObjectAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_3dmObjectAttributes_m_uuid(IntPtr pConstObjectAttributes);

  //void ON_3dmObjectAttributes_set_m_uuid(ON_3dmObjectAttributes* pAttributes, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmObjectAttributes_set_m_uuid(IntPtr pAttributes, Guid id);

  //void ON_3dmObjectAttributes_GetSetString(ON_3dmObjectAttributes* ptr, int which, bool set, const RHMONO_STRING* _str, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmObjectAttributes_GetSetString(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.LPWStr)]string _str, IntPtr pStringHolder);

  //int ON_3dmObjectAttributes_GetSetColor(ON_3dmObjectAttributes* ptr, int which, bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dmObjectAttributes_GetSetColor(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //double ON_3dmObjectAttributes_PlotWeight(ON_3dmObjectAttributes* ptr, bool set, double set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_3dmObjectAttributes_PlotWeight(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, double set_value);

  //ON_UUID ON_3dmObjectAttributes_ViewportId(ON_3dmObjectAttributes* ptr, bool set, ON_UUID set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_3dmObjectAttributes_ViewportId(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, Guid set_value);

  //void ON_3dmObjectAttributes_GroupList(const ON_3dmObjectAttributes* ptr, int* list)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmObjectAttributes_GroupList(IntPtr ptr, ref int list);

  //void ON_3dmObjectAttributes_GroupOp(ON_3dmObjectAttributes* ptr, int whichOp, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmObjectAttributes_GroupOp(IntPtr ptr, int whichOp, int index);

  //bool ON_3dmObjectAttributes_HasDisplayModeOverride(const ON_3dmObjectAttributes* pConstObjectAttributes, ON_UUID viewportId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dmObjectAttributes_HasDisplayModeOverride(IntPtr pConstObjectAttributes, Guid viewportId);

  //bool ON_3dmObjectAttributes_UseDisplayMode(ON_3dmObjectAttributes* pObjectAttributes, ON_UUID rhinoViewportId, ON_UUID modeId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dmObjectAttributes_UseDisplayMode(IntPtr pObjectAttributes, Guid rhinoViewportId, Guid modeId);

  //void ON_3dmObjectAttributes_ClearDisplayMode(ON_3dmObjectAttributes* pObjectAttributes, ON_UUID rhinoViewportId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmObjectAttributes_ClearDisplayMode(IntPtr pObjectAttributes, Guid rhinoViewportId);
  #endregion


  #region on_3dm_settings.cpp
  //void ON_3dmConstructionPlane_Copy(const ON_3dmConstructionPlane* pCP, ON_PLANE_STRUCT* plane,
  //                                                double* grid_spacing, double* snap_spacing,
  //                                                int* grid_line_count, int* grid_thick_freq,
  //                                                bool* depthbuffered, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmConstructionPlane_Copy(IntPtr pCP, ref Plane plane, ref double grid_spacing, ref double snap_spacing, ref int grid_line_count, ref int grid_thick_freq, [MarshalAs(UnmanagedType.U1)]ref bool depthbuffered, IntPtr pString);

  //ON_3dmConstructionPlane* ON_3dmConstructionPlane_New(const ON_PLANE_STRUCT* plane,
  //                                                                   double grid_spacing,
  //                                                                   double snap_spacing,
  //                                                                   int grid_line_count,
  //                                                                   int grid_thick_frequency,
  //                                                                   bool depthBuffered,
  //                                                                   const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmConstructionPlane_New(ref Plane plane, double grid_spacing, double snap_spacing, int grid_line_count, int grid_thick_frequency, [MarshalAs(UnmanagedType.U1)]bool depthBuffered, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //void ON_3dmConstructionPlane_Delete(ON_3dmConstructionPlane* pCPlane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmConstructionPlane_Delete(IntPtr pCPlane);

  //ON_3dmView* ON_3dmView_New(const ON_3dmView* pConstOther3dmView)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmView_New(IntPtr pConstOther3dmView);

  //void ON_3dmView_Delete(ON_3dmView* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmView_Delete(IntPtr ptr);

  //void ON_3dmView_NameGet(const ON_3dmView* pView, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmView_NameGet(IntPtr pView, IntPtr pString);

  //void ON_3dmView_NameSet(ON_3dmView* pView, const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmView_NameSet(IntPtr pView, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //const ON_Viewport* ON_3dmView_ViewportPointer(const ON_3dmView* pView)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmView_ViewportPointer(IntPtr pView);

  //ON_EarthAnchorPoint* ON_EarthAnchorPoint_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_EarthAnchorPoint_New();

  //void ON_EarthAnchorPoint_Delete(ON_EarthAnchorPoint* pEarthAnchor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_EarthAnchorPoint_Delete(IntPtr pEarthAnchor);

  //double ON_EarthAnchorPoint_GetDouble(const ON_EarthAnchorPoint* pConstEarthAnchor, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_EarthAnchorPoint_GetDouble(IntPtr pConstEarthAnchor, int which);

  //void ON_EarthAnchorPoint_SetDouble(ON_EarthAnchorPoint* pEarthAnchor, int which, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_EarthAnchorPoint_SetDouble(IntPtr pEarthAnchor, int which, double val);

  //int ON_EarthAnchorPoint_GetEarthBasepointElevationZero(const ON_EarthAnchorPoint* pConstEarthAnchor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_EarthAnchorPoint_GetEarthBasepointElevationZero(IntPtr pConstEarthAnchor);

  //void ON_EarthAnchorPoint_SetEarthBasepointElevationZero(ON_EarthAnchorPoint* pEarthAnchor, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_EarthAnchorPoint_SetEarthBasepointElevationZero(IntPtr pEarthAnchor, int val);

  //void ON_EarthAnchorPoint_ModelBasePoint(ON_EarthAnchorPoint* pEarthAnchor, bool set, ON_3dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_EarthAnchorPoint_ModelBasePoint(IntPtr pEarthAnchor, [MarshalAs(UnmanagedType.U1)]bool set, ref Point3d point);

  //void ON_EarthAnchorPoint_ModelDirection(ON_EarthAnchorPoint* pEarthAnchor, bool north, bool set, ON_3dVector* vector)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_EarthAnchorPoint_ModelDirection(IntPtr pEarthAnchor, [MarshalAs(UnmanagedType.U1)]bool north, [MarshalAs(UnmanagedType.U1)]bool set, ref Vector3d vector);

  //void ON_EarthAnchorPoint_GetString(const ON_EarthAnchorPoint* pConstEarthAnchor, bool name, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_EarthAnchorPoint_GetString(IntPtr pConstEarthAnchor, [MarshalAs(UnmanagedType.U1)]bool name, IntPtr pString);

  //void ON_EarthAnchorPoint_SetString(ON_EarthAnchorPoint* pEarthAnchor, bool name, const RHMONO_STRING* str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_EarthAnchorPoint_SetString(IntPtr pEarthAnchor, [MarshalAs(UnmanagedType.U1)]bool name, [MarshalAs(UnmanagedType.LPWStr)]string str);

  //void ON_EarthAnchorPoint_GetModelCompass(const ON_EarthAnchorPoint* pConstEarthAnchor, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_EarthAnchorPoint_GetModelCompass(IntPtr pConstEarthAnchor, ref Plane plane);

  //void ON_EarthAnchorPoint_GetModelToEarthTransform(const ON_EarthAnchorPoint* pConstEarthAnchor, int units, ON_Xform* xform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_EarthAnchorPoint_GetModelToEarthTransform(IntPtr pConstEarthAnchor, int units, ref Transform xform);

  //void ON_3dmSettings_GetModelUrl(const ON_3dmSettings* pConstSettings, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmSettings_GetModelUrl(IntPtr pConstSettings, IntPtr pString);

  //void ON_3dmSettings_SetModelUrl(ON_3dmSettings* pSettings, const RHMONO_STRING* str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmSettings_SetModelUrl(IntPtr pSettings, [MarshalAs(UnmanagedType.LPWStr)]string str);

  //void ON_3dmSettings_GetModelBasepoint(const ON_3dmSettings* pConstSettings, ON_3dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmSettings_GetModelBasepoint(IntPtr pConstSettings, ref Point3d point);

  //void ON_3dmSettings_SetModelBasepoint(ON_3dmSettings* pSettings, ON_3DPOINT_STRUCT point )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmSettings_SetModelBasepoint(IntPtr pSettings, Point3d point);

  //double ON_3dmSettings_GetDouble(const ON_3dmSettings* pConstSettings, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_3dmSettings_GetDouble(IntPtr pConstSettings, int which);

  //void ON_3dmSettings_SetDouble(ON_3dmSettings* pSettings, int which, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmSettings_SetDouble(IntPtr pSettings, int which, double val);

  //int ON_3dmSettings_GetSetUnitSystem(ON_3dmSettings* pSettings, bool model, bool set, int set_val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dmSettings_GetSetUnitSystem(IntPtr pSettings, [MarshalAs(UnmanagedType.U1)]bool model, [MarshalAs(UnmanagedType.U1)]bool set, int set_val);

  //ON_3dmRenderSettings* ON_3dmRenderSettings_New(const ON_3dmRenderSettings* other)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmRenderSettings_New(IntPtr other);

  //const ON_3dmRenderSettings* ON_3dmRenderSettings_ConstPointer(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmRenderSettings_ConstPointer(int docId);

  //void ON_3dmRenderSettings_Delete(ON_3dmRenderSettings* pRenderSettings)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmRenderSettings_Delete(IntPtr pRenderSettings);

  //int ON_3dmRenderSettings_GetColor(const ON_3dmRenderSettings* pConstRenderSettings, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dmRenderSettings_GetColor(IntPtr pConstRenderSettings, int which);

  //void ON_3dmRenderSettings_SetColor(ON_3dmRenderSettings* pRenderSettings, int which, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmRenderSettings_SetColor(IntPtr pRenderSettings, int which, int argb);

  //bool ON_3dmRenderSettings_GetBool(const ON_3dmRenderSettings* pConstRenderSettings, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dmRenderSettings_GetBool(IntPtr pConstRenderSettings, int which);

  //void ON_3dmRenderSettings_SetBool(ON_3dmRenderSettings* pRenderSettings, int which, bool b)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmRenderSettings_SetBool(IntPtr pRenderSettings, int which, [MarshalAs(UnmanagedType.U1)]bool b);

  //int ON_3dmRenderSettings_GetInt(const ON_3dmRenderSettings* pConstRenderSettings, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dmRenderSettings_GetInt(IntPtr pConstRenderSettings, int which);

  //void ON_3dmRenderSettings_SetInt(ON_3dmRenderSettings* pRenderSettings, int which, int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmRenderSettings_SetInt(IntPtr pRenderSettings, int which, int i);
  #endregion


  #region on_annotation2.cpp
  //double ON_Annotation2_NumericValue(const ON_Annotation2* pConstAnnotation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Annotation2_NumericValue(IntPtr pConstAnnotation);

  //void ON_Annotation2_GetPoint(const ON_Annotation2* pConstAnnotation, int which, ON_2dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Annotation2_GetPoint(IntPtr pConstAnnotation, int which, ref Point2d point);

  //void ON_Annotation2_SetPoint(ON_Annotation2* pAnnotation, int which, ON_2DPOINT_STRUCT point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Annotation2_SetPoint(IntPtr pAnnotation, int which, Point2d point);

  //void ON_Annotation2_Text(ON_Annotation2* pAnnotation2, CRhCmnStringHolder* pStringHolder, const RHMONO_STRING* _str, bool formula)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Annotation2_Text(IntPtr pAnnotation2, IntPtr pStringHolder, [MarshalAs(UnmanagedType.LPWStr)]string _str, [MarshalAs(UnmanagedType.U1)]bool formula);

  //double ON_Annotation2_Height(ON_Annotation2* ptr, bool set, double set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Annotation2_Height(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, double set_value);

  //int ON_Annotation2_Index(ON_Annotation2* ptr, bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Annotation2_Index(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //void ON_Annotation2_Plane(ON_Annotation2* ptr, ON_PLANE_STRUCT* plane, bool set)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Annotation2_Plane(IntPtr ptr, ref Plane plane, [MarshalAs(UnmanagedType.U1)]bool set);

  //int ON_Annotation2_GetJustification(const ON_Annotation2* pConstAnnotation2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Annotation2_GetJustification(IntPtr pConstAnnotation2);

  //void ON_Annotation2_SetJustification(ON_Annotation2* pAnnotation2, int justification)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Annotation2_SetJustification(IntPtr pAnnotation2, int justification);

  //ON_LinearDimension2* ON_LinearDimension2_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LinearDimension2_New();

  //void ON_LinearDimension2_SetLocations(ON_LinearDimension2* pLinearDimension2, ON_2DPOINT_STRUCT ext0, ON_2DPOINT_STRUCT ext1, ON_2DPOINT_STRUCT linePt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LinearDimension2_SetLocations(IntPtr pLinearDimension2, Point2d ext0, Point2d ext1, Point2d linePt);

  //bool ON_LinearDimension2_IsAligned(const ON_LinearDimension2* pConstLinearDimension2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_LinearDimension2_IsAligned(IntPtr pConstLinearDimension2);

  //void ON_LinearDimension2_SetAligned( ON_LinearDimension2* pLinearDimension2, bool val )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LinearDimension2_SetAligned(IntPtr pLinearDimension2, [MarshalAs(UnmanagedType.U1)]bool val);

  //ON_RadialDimension2* ON_RadialDimension2_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_RadialDimension2_New();

  //bool ON_RadialDimension2_IsDiameterDimension( const ON_RadialDimension2* pConstRadialDimension2 )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RadialDimension2_IsDiameterDimension(IntPtr pConstRadialDimension2);

  //bool ON_RadialDimension2_CreateFromPoints(ON_RadialDimension2* pRadialDimension, ON_3DPOINT_STRUCT center, ON_3DPOINT_STRUCT arrowTip,
  //                                                        ON_3DVECTOR_STRUCT xaxis, ON_3DVECTOR_STRUCT normal, double offset_distance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RadialDimension2_CreateFromPoints(IntPtr pRadialDimension, Point3d center, Point3d arrowTip, Vector3d xaxis, Vector3d normal, double offset_distance);

  //ON_TextDot* ON_TextDot_New(const RHMONO_STRING* _str, ON_3DPOINT_STRUCT loc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_TextDot_New([MarshalAs(UnmanagedType.LPWStr)]string _str, Point3d loc);

  //void ON_TextDot_GetSetPoint(ON_TextDot* ptr, bool set, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextDot_GetSetPoint(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, ref Point3d pt);

  //void ON_TextDot_GetSetText(ON_TextDot* ptr, bool set, const RHMONO_STRING* _text, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextDot_GetSetText(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.LPWStr)]string _text, IntPtr pStringHolder);

  //int ON_TextDot_GetHeight(const ON_TextDot* pConstDot)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_TextDot_GetHeight(IntPtr pConstDot);

  //void ON_TextDot_SetHeight(ON_TextDot* pDot, int height)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextDot_SetHeight(IntPtr pDot, int height);

  //void ON_TextDot_GetFontFace(const ON_TextDot* pConstDot, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextDot_GetFontFace(IntPtr pConstDot, IntPtr pStringHolder);

  //void ON_TextDot_SetFontFace(ON_TextDot* pDot, const RHMONO_STRING* face)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextDot_SetFontFace(IntPtr pDot, [MarshalAs(UnmanagedType.LPWStr)]string face);

  //ON_TextEntity2* ON_TextEntity2_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_TextEntity2_New();

  //bool ON_TextEntity2_DrawTextMask(const ON_TextEntity2* pConstTextEntity2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_TextEntity2_DrawTextMask(IntPtr pConstTextEntity2);

  //void ON_TextEntity2_SetDrawTextMask(ON_TextEntity2* pTextEntity2, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextEntity2_SetDrawTextMask(IntPtr pTextEntity2, [MarshalAs(UnmanagedType.U1)]bool val);

  //bool ON_TextEntity2_AnnotativeScaling(const ON_TextEntity2* pConstTextEntity2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_TextEntity2_AnnotativeScaling(IntPtr pConstTextEntity2);

  //void ON_TextEntity2_SetAnnotativeScaling(ON_TextEntity2* pTextEntity2, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextEntity2_SetAnnotativeScaling(IntPtr pTextEntity2, [MarshalAs(UnmanagedType.U1)]bool val);

  //int ON_TextEntity2_MaskColorSource(const ON_TextEntity2* pConstTextEntity2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_TextEntity2_MaskColorSource(IntPtr pConstTextEntity2);

  //int ON_TextEntity2_MaskColor(const ON_TextEntity2* pConstTextEntity2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_TextEntity2_MaskColor(IntPtr pConstTextEntity2);

  //void ON_TextEntity2_SetMaskColor(ON_TextEntity2* pTextEntity2, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextEntity2_SetMaskColor(IntPtr pTextEntity2, int argb);

  //int ON_TextEntity2_MaskSource(const ON_TextEntity2* pConstTextEntity2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_TextEntity2_MaskSource(IntPtr pConstTextEntity2);

  //void ON_TextEntity2_SetMaskSource(ON_TextEntity2* pTextEntity2, int source)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextEntity2_SetMaskSource(IntPtr pTextEntity2, int source);

  //double ON_TextEntity2_MaskOffsetFactor(const ON_TextEntity2* pConstTextEntity2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_TextEntity2_MaskOffsetFactor(IntPtr pConstTextEntity2);

  //void ON_TextEntity2_SetMaskOffsetFactor(ON_TextEntity2* pTextEntity2, double factor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextEntity2_SetMaskOffsetFactor(IntPtr pTextEntity2, double factor);

  //ON_AngularDimension2* ON_AngularDimension2_New(ON_Arc* arc, double offset)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_AngularDimension2_New(ref Arc arc, double offset);
  #endregion


  #region on_arc.cpp
  //void ON_Arc_Create1( ON_Arc* pArc, const ON_CIRCLE_STRUCT* pCircle, double angle_radians )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create1(ref Arc pArc, ref Circle pCircle, double angle_radians);

  //void ON_Arc_Create2( ON_Arc* pArc, const ON_CIRCLE_STRUCT* pCircle, ON_INTERVAL_STRUCT interval)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create2(ref Arc pArc, ref Circle pCircle, Interval interval);

  //void ON_Arc_Create3( ON_Arc* pArc, const ON_PLANE_STRUCT* plane, double radius, double angle_radians )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create3(ref Arc pArc, ref Plane plane, double radius, double angle_radians);

  //void ON_Arc_Create4( ON_Arc* pArc, ON_3DPOINT_STRUCT center, double radius, double angle_radians )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create4(ref Arc pArc, Point3d center, double radius, double angle_radians);

  //void ON_Arc_Create5( ON_Arc* pArc, const ON_PLANE_STRUCT* plane, ON_3DPOINT_STRUCT center, double radius, double angle_radians )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create5(ref Arc pArc, ref Plane plane, Point3d center, double radius, double angle_radians);

  //void ON_Arc_Create6( ON_Arc* pArc, ON_3DPOINT_STRUCT p, ON_3DPOINT_STRUCT q, ON_3DPOINT_STRUCT r )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create6(ref Arc pArc, Point3d p, Point3d q, Point3d r);

  //bool ON_Arc_IsValid(ON_Arc* pArc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Arc_IsValid(ref Arc pArc);

  //void ON_Arc_BoundingBox(ON_Arc* pArc, ON_BoundingBox* bbox)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_BoundingBox(ref Arc pArc, ref BoundingBox bbox);

  //bool ON_Arc_Transform( ON_Arc* pArc, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Arc_Transform(ref Arc pArc, ref Transform xf);

  //bool ON_Arc_ClosestPointTo(ON_Arc* pArc,
  //                                         ON_3DPOINT_STRUCT testPoint,
  //                                         double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Arc_ClosestPointTo(ref Arc pArc, Point3d testPoint, ref double t);

  //int ON_Arc_GetNurbForm(ON_Arc* pArc, ON_NurbsCurve* nurbs_curve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Arc_GetNurbForm(ref Arc pArc, IntPtr nurbs_curve);
  #endregion


  #region on_arccurve.cpp
  //ON_ArcCurve* ON_ArcCurve_New( ON_ArcCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New(IntPtr pOther);

  //ON_ArcCurve* ON_ArcCurve_New2( ON_Arc* arc )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New2(ref Arc arc);

  //ON_ArcCurve* ON_ArcCurve_New3( ON_Arc* arc, double t0, double t1 )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New3(ref Arc arc, double t0, double t1);

  //ON_ArcCurve* ON_ArcCurve_New4( const ON_CIRCLE_STRUCT* pCircle )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New4(ref Circle pCircle);

  //ON_ArcCurve* ON_ArcCurve_New5( const ON_CIRCLE_STRUCT* pCircle, double t0, double t1 )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New5(ref Circle pCircle, double t0, double t1);

  //bool ON_ArcCurve_IsCircle( const ON_ArcCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_ArcCurve_IsCircle(IntPtr pCurve);

  //double ON_ArcCurve_GetDouble(const ON_ArcCurve* pCurve, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_ArcCurve_GetDouble(IntPtr pCurve, int which);

  //void ON_ArcCurve_GetArc(const ON_ArcCurve* pConstCurve, ON_Arc* rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ArcCurve_GetArc(IntPtr pConstCurve, ref Arc rc);
  #endregion


  #region on_archive.cpp
  //CRhCmnStringHolder* StringHolder_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr StringHolder_New();

  //void StringHolder_Delete(CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void StringHolder_Delete(IntPtr pStringHolder);

  //const RHMONO_STRING* StringHolder_Get(CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr StringHolder_Get(IntPtr pStringHolder);

  //bool ON_BinaryArchive_AtEnd(const ON_BinaryArchive* pConstArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_AtEnd(IntPtr pConstArchive);

  //bool ON_BinaryArchive_Read3dmStartSection(ON_BinaryArchive* pBinaryArchive, int* version, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_Read3dmStartSection(IntPtr pBinaryArchive, ref int version, IntPtr pStringHolder);

  //unsigned int ON_BinaryArchive_Dump3dmChunk(ON_BinaryArchive* pBinaryArchive, ON_TextLog* pTextLog)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint ON_BinaryArchive_Dump3dmChunk(IntPtr pBinaryArchive, IntPtr pTextLog);

  //int ON_BinaryArchive_Archive3dmVersion(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BinaryArchive_Archive3dmVersion(IntPtr pArchive);

  //bool ON_BinaryArchive_Write3dmChunkVersion(ON_BinaryArchive* pArchive, int major, int minor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_Write3dmChunkVersion(IntPtr pArchive, int major, int minor);

  //bool ON_BinaryArchive_Read3dmChunkVersion(ON_BinaryArchive* pArchive, int* major, int* minor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_Read3dmChunkVersion(IntPtr pArchive, ref int major, ref int minor);

  //bool ON_BinaryArchive_ReadBool(ON_BinaryArchive* pArchive, bool* readBool)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadBool(IntPtr pArchive, [MarshalAs(UnmanagedType.U1)]ref bool readBool);

  //bool ON_BinaryArchive_WriteBool(ON_BinaryArchive* pArchive, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteBool(IntPtr pArchive, [MarshalAs(UnmanagedType.U1)]bool val);

  //bool ON_BinaryArchive_ReadBool2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/bool* readBool)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadBool2(IntPtr pArchive, int count, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.U1), In, Out] bool[] readBool);

  //bool ON_BinaryArchive_WriteBool2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const bool* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteBool2(IntPtr pArchive, int count, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.U1)] bool[] val);

  //bool ON_BinaryArchive_ReadByte(ON_BinaryArchive* pArchive, char* readByte)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadByte(IntPtr pArchive, ref byte readByte);

  //bool ON_BinaryArchive_WriteByte(ON_BinaryArchive* pArchive, char val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteByte(IntPtr pArchive, byte val);

  //bool ON_BinaryArchive_ReadByte2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/char* readByte)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadByte2(IntPtr pArchive, int count, [In,Out] byte[] readByte);

  //bool ON_BinaryArchive_WriteByte2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const char* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteByte2(IntPtr pArchive, int count, byte[] val);

  //bool ON_BinaryArchive_ReadCompressedBufferSize( ON_BinaryArchive* pArchive, unsigned int* size )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadCompressedBufferSize(IntPtr pArchive, ref uint size);

  //bool ON_BinaryArchive_ReadCompressedBuffer( ON_BinaryArchive* pArchive, unsigned int size, /*ARRAY*/char* pBuffer )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadCompressedBuffer(IntPtr pArchive, uint size, [In,Out] byte[] pBuffer);

  //bool ON_BinaryArchive_WriteCompressedBuffer( ON_BinaryArchive* pArchive, unsigned int size, /*ARRAY*/const char* pBuffer )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteCompressedBuffer(IntPtr pArchive, uint size, byte[] pBuffer);

  //bool ON_BinaryArchive_ReadShort(ON_BinaryArchive* pArchive, short* readShort)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadShort(IntPtr pArchive, ref short readShort);

  //bool ON_BinaryArchive_WriteShort(ON_BinaryArchive* pArchive, short val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteShort(IntPtr pArchive, short val);

  //bool ON_BinaryArchive_ReadShort2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/short* readShort)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadShort2(IntPtr pArchive, int count, [In,Out] short[] readShort);

  //bool ON_BinaryArchive_WriteShort2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const short* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteShort2(IntPtr pArchive, int count, short[] val);

  //bool ON_BinaryArchive_ReadInt(ON_BinaryArchive* pArchive, int* readInt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadInt(IntPtr pArchive, ref int readInt);

  //bool ON_BinaryArchive_WriteInt(ON_BinaryArchive* pArchive, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteInt(IntPtr pArchive, int val);

  //bool ON_BinaryArchive_ReadInt2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/int* readInt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadInt2(IntPtr pArchive, int count, [In,Out] int[] readInt);

  //bool ON_BinaryArchive_WriteInt2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const int* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteInt2(IntPtr pArchive, int count, int[] val);

  //bool ON_BinaryArchive_ReadInt64(ON_BinaryArchive* pArchive, ON__INT64* readInt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadInt64(IntPtr pArchive, ref Int64 readInt);

  //bool ON_BinaryArchive_WriteInt64(ON_BinaryArchive* pArchive, ON__INT64 val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteInt64(IntPtr pArchive, Int64 val);

  //bool ON_BinaryArchive_ReadSingle(ON_BinaryArchive* pArchive, float* readFloat)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadSingle(IntPtr pArchive, ref float readFloat);

  //bool ON_BinaryArchive_WriteSingle(ON_BinaryArchive* pArchive, float val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteSingle(IntPtr pArchive, float val);

  //bool ON_BinaryArchive_ReadSingle2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/float* readFloat)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadSingle2(IntPtr pArchive, int count, [In,Out] float[] readFloat);

  //bool ON_BinaryArchive_WriteSingle2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const float* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteSingle2(IntPtr pArchive, int count, float[] val);

  //bool ON_BinaryArchive_ReadDouble(ON_BinaryArchive* pArchive, double* readDouble)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadDouble(IntPtr pArchive, ref double readDouble);

  //bool ON_BinaryArchive_WriteDouble(ON_BinaryArchive* pArchive, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteDouble(IntPtr pArchive, double val);

  //bool ON_BinaryArchive_ReadDouble2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/double* readDouble)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadDouble2(IntPtr pArchive, int count, [In,Out] double[] readDouble);

  //bool ON_BinaryArchive_WriteDouble2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const double* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteDouble2(IntPtr pArchive, int count, double[] val);

  //bool ON_BinaryArchive_ReadGuid(ON_BinaryArchive* pArchive, ON_UUID* readGuid)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadGuid(IntPtr pArchive, ref Guid readGuid);

  //bool ON_BinaryArchive_WriteGuid(ON_BinaryArchive* pArchive, const ON_UUID* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteGuid(IntPtr pArchive, ref Guid val);

  //bool ON_BinaryArchive_ReadString(ON_BinaryArchive* pArchive, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadString(IntPtr pArchive, IntPtr pStringHolder);

  //bool ON_BinaryArchive_WriteString(ON_BinaryArchive* pArchive, const RHMONO_STRING* str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteString(IntPtr pArchive, [MarshalAs(UnmanagedType.LPWStr)]string str);

  //bool ON_BinaryArchive_ReadColor(ON_BinaryArchive* pArchive, int* argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadColor(IntPtr pArchive, ref int argb);

  //bool ON_BinaryArchive_WriteColor(ON_BinaryArchive* pArchive, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteColor(IntPtr pArchive, int argb);

  //bool ON_BinaryArchive_ReadTransform(ON_BinaryArchive* pArchive, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadTransform(IntPtr pArchive, ref Transform xf);

  //bool ON_BinaryArchive_WriteTransform(ON_BinaryArchive* pArchive, const ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteTransform(IntPtr pArchive, ref Transform xf);

  //bool ON_BinaryArchive_ReadPlane(ON_BinaryArchive* pArchive, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadPlane(IntPtr pArchive, ref Plane plane);

  //bool ON_BinaryArchive_WritePlane(ON_BinaryArchive* pArchive, const ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WritePlane(IntPtr pArchive, ref Plane plane);

  //ON_Object* ON_BinaryArchive_ReadObject(ON_BinaryArchive* pArchive, int* read_rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BinaryArchive_ReadObject(IntPtr pArchive, ref int read_rc);

  //ON_Geometry* ON_BinaryArchive_ReadGeometry(ON_BinaryArchive* pArchive, int* read_rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BinaryArchive_ReadGeometry(IntPtr pArchive, ref int read_rc);

  //ON_MeshParameters* ON_BinaryArchive_ReadMeshParameters(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BinaryArchive_ReadMeshParameters(IntPtr pArchive);

  //bool ON_BinaryArchive_WriteMeshParameters(ON_BinaryArchive* pArchive, const ON_MeshParameters* pConstMeshParameters)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteMeshParameters(IntPtr pArchive, IntPtr pConstMeshParameters);

  //bool ON_BinaryArchive_WriteGeometry(ON_BinaryArchive* pArchive, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteGeometry(IntPtr pArchive, IntPtr pConstGeometry);

  //bool ON_BinaryArchive_ReadObjRef(ON_BinaryArchive* pArchive, ON_ObjRef* pObjRef)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadObjRef(IntPtr pArchive, IntPtr pObjRef);

  //bool ON_BinaryArchive_WriteObjRef(ON_BinaryArchive* pArchive, const ON_ObjRef* pConstObjRef)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteObjRef(IntPtr pArchive, IntPtr pConstObjRef);

  //bool ON_BinaryArchive_ReadObjRefArray(ON_BinaryArchive* pArchive, ON_ClassArray<ON_ObjRef>* pObjRefArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadObjRefArray(IntPtr pArchive, IntPtr pObjRefArray);

  //bool ON_BinaryArchive_WriteObjRefArray(ON_BinaryArchive* pArchive, const ON_ClassArray<ON_ObjRef>* pConstObjRefArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteObjRefArray(IntPtr pArchive, IntPtr pConstObjRefArray);

  //bool ON_BinaryArchive_BeginReadDictionary(ON_BinaryArchive* pArchive, ON_UUID* dictionary_id, unsigned int* version, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_BeginReadDictionary(IntPtr pArchive, ref Guid dictionary_id, ref uint version, IntPtr pStringHolder);

  //bool ON_BinaryArchive_EndReadDictionary(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_EndReadDictionary(IntPtr pArchive);

  //bool ON_BinaryArchive_BeginWriteDictionary(ON_BinaryArchive* pArchive, ON_UUID dictionary_id, unsigned int version, const RHMONO_STRING* name )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_BeginWriteDictionary(IntPtr pArchive, Guid dictionary_id, uint version, [MarshalAs(UnmanagedType.LPWStr)]string name);

  //bool ON_BinaryArchive_EndWriteDictionary(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_EndWriteDictionary(IntPtr pArchive);

  //int ON_BinaryArchive_BeginReadDictionaryEntry(ON_BinaryArchive* pArchive, int* de_type, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BinaryArchive_BeginReadDictionaryEntry(IntPtr pArchive, ref int de_type, IntPtr pStringHolder);

  //bool ON_BinaryArchive_EndReadDictionaryEntry(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_EndReadDictionaryEntry(IntPtr pArchive);

  //bool ON_BinaryArchive_BeginWriteDictionaryEntry(ON_BinaryArchive* pArchive, int de_type, const RHMONO_STRING* entry_name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_BeginWriteDictionaryEntry(IntPtr pArchive, int de_type, [MarshalAs(UnmanagedType.LPWStr)]string entry_name);

  //bool ON_BinaryArchive_EndWriteDictionaryEntry(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_EndWriteDictionaryEntry(IntPtr pArchive);

  //ON_Object* ON_ReadBufferArchive(int archive_3dm_version, int archive_on_version, int length, /*ARRAY*/const unsigned char* buffer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ReadBufferArchive(int archive_3dm_version, int archive_on_version, int length, byte[] buffer);

  //ON_Write3dmBufferArchive* ON_WriteBufferArchive_NewWriter(const ON_Object* pConstObject, int rhinoversion, bool writeuserdata, unsigned int* length)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_WriteBufferArchive_NewWriter(IntPtr pConstObject, int rhinoversion, [MarshalAs(UnmanagedType.U1)]bool writeuserdata, ref uint length);

  //void ON_WriteBufferArchive_Delete(ON_BinaryArchive* pBinaryArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_WriteBufferArchive_Delete(IntPtr pBinaryArchive);

  //unsigned char* ON_WriteBufferArchive_Buffer(const ON_Write3dmBufferArchive* pBinaryArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_WriteBufferArchive_Buffer(IntPtr pBinaryArchive);

  //ONX_Model* ONX_Model_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_New();

  //void ONX_Model_ReadNotes(const RHMONO_STRING* path, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_ReadNotes([MarshalAs(UnmanagedType.LPWStr)]string path, IntPtr pString);

  //ON_3dmRevisionHistory* ONX_Model_ReadRevisionHistory(const RHMONO_STRING* path, CRhCmnStringHolder* pStringCreated, CRhCmnStringHolder* pStringLastEdited, int* revision)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_ReadRevisionHistory([MarshalAs(UnmanagedType.LPWStr)]string path, IntPtr pStringCreated, IntPtr pStringLastEdited, ref int revision);

  //bool ON_3dmRevisionHistory_GetDate(const ON_3dmRevisionHistory* pConstRevisionHistory, bool created, int* seconds, int* minutes,
  //                                                 int* hours, int* days, int* months, int* years)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dmRevisionHistory_GetDate(IntPtr pConstRevisionHistory, [MarshalAs(UnmanagedType.U1)]bool created, ref int seconds, ref int minutes, ref int hours, ref int days, ref int months, ref int years);

  //ON_3dmRevisionHistory* ONX_Model_RevisionHistory(ONX_Model* pModel)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_RevisionHistory(IntPtr pModel);

  //void ON_3dmRevisionHistory_Delete(ON_3dmRevisionHistory* pRevisionHistory)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmRevisionHistory_Delete(IntPtr pRevisionHistory);

  //void ONX_Model_ReadApplicationDetails(const RHMONO_STRING* path, CRhCmnStringHolder* pApplicationName, CRhCmnStringHolder* pApplicationUrl, CRhCmnStringHolder* pApplicationDetails)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_ReadApplicationDetails([MarshalAs(UnmanagedType.LPWStr)]string path, IntPtr pApplicationName, IntPtr pApplicationUrl, IntPtr pApplicationDetails);

  //ONX_Model* ONX_Model_ReadFile(const RHMONO_STRING* path, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_ReadFile([MarshalAs(UnmanagedType.LPWStr)]string path, IntPtr pStringHolder);

  //bool ONX_Model_WriteFile(ONX_Model* pModel, const RHMONO_STRING* path, int version, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ONX_Model_WriteFile(IntPtr pModel, [MarshalAs(UnmanagedType.LPWStr)]string path, int version, IntPtr pStringHolder);

  //bool ONX_Model_WriteFile2(ONX_Model* pModel, const RHMONO_STRING* path, int version, bool writeRenderMeshes, bool writeAnalysisMeshes, bool writeUserData)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ONX_Model_WriteFile2(IntPtr pModel, [MarshalAs(UnmanagedType.LPWStr)]string path, int version, [MarshalAs(UnmanagedType.U1)]bool writeRenderMeshes, [MarshalAs(UnmanagedType.U1)]bool writeAnalysisMeshes, [MarshalAs(UnmanagedType.U1)]bool writeUserData);

  //void ONX_Model_Delete(ONX_Model* pModel)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_Delete(IntPtr pModel);

  //bool ONX_Model_IsValid(const ONX_Model* pConstModel, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ONX_Model_IsValid(IntPtr pConstModel, IntPtr pString);

  //bool ONX_Model_IsValid2(const ONX_Model* pConstModel, ON_TextLog* pTextLog)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ONX_Model_IsValid2(IntPtr pConstModel, IntPtr pTextLog);

  //void ONX_Model_Polish(ONX_Model* pModel)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_Polish(IntPtr pModel);

  //int ONX_Model_Audit(ONX_Model* pModel, bool attemptRepair, int* repairCount, CRhCmnStringHolder* pString, ON_SimpleArray<int>* warnings)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ONX_Model_Audit(IntPtr pModel, [MarshalAs(UnmanagedType.U1)]bool attemptRepair, ref int repairCount, IntPtr pString, IntPtr warnings);

  //void ONX_Model_GetStartSectionComments(const ONX_Model* pConstModel, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_GetStartSectionComments(IntPtr pConstModel, IntPtr pString);

  //void ONX_Model_SetStartSectionComments(ONX_Model* pModel, const RHMONO_STRING* comments)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_SetStartSectionComments(IntPtr pModel, [MarshalAs(UnmanagedType.LPWStr)]string comments);

  //void ONX_Model_GetNotes(const ONX_Model* pConstModel, CRhCmnStringHolder* pString, bool* visible, bool* html, int* left, int* top, int* right, int* bottom)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_GetNotes(IntPtr pConstModel, IntPtr pString, [MarshalAs(UnmanagedType.U1)]ref bool visible, [MarshalAs(UnmanagedType.U1)]ref bool html, ref int left, ref int top, ref int right, ref int bottom);

  //void ONX_Model_SetNotesString(ONX_Model* pModel, const RHMONO_STRING* notes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_SetNotesString(IntPtr pModel, [MarshalAs(UnmanagedType.LPWStr)]string notes);

  //void ONX_Model_SetNotes(ONX_Model* pModel, bool visible, bool html, int left, int top, int right, int bottom)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_SetNotes(IntPtr pModel, [MarshalAs(UnmanagedType.U1)]bool visible, [MarshalAs(UnmanagedType.U1)]bool html, int left, int top, int right, int bottom);

  //int ONX_Model_TableCount(const ONX_Model* pConstModel, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ONX_Model_TableCount(IntPtr pConstModel, int which);

  //void ONX_Model_Dump(const ONX_Model* pConstModel, int which, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_Dump(IntPtr pConstModel, int which, IntPtr pStringHolder);

  //void ONX_Model_Dump2(const ONX_Model* pConstModel, ON_TextLog* pTextLog)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_Dump2(IntPtr pConstModel, IntPtr pTextLog);

  //const ON_Geometry* ONX_Model_ModelObjectGeometry(const ONX_Model* pConstModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_ModelObjectGeometry(IntPtr pConstModel, int index);

  //const ON_3dmObjectAttributes* ONX_Model_ModelObjectAttributes(const ONX_Model* pConstModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_ModelObjectAttributes(IntPtr pConstModel, int index);

  //bool ONX_Model_ObjectTable_LayerIndexTest(const ONX_Model* pConstModel, int objectIndex, int layerIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ONX_Model_ObjectTable_LayerIndexTest(IntPtr pConstModel, int objectIndex, int layerIndex);

  //ON_UUID ONX_Model_ObjectTable_AddPoint(ONX_Model* pModel, ON_3DPOINT_STRUCT point, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddPoint(IntPtr pModel, Point3d point, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddPointCloud(ONX_Model* pModel, int count, /*ARRAY*/const ON_3dPoint* points, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddPointCloud(IntPtr pModel, int count, Point3d[] points, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddPointCloud2(ONX_Model* pModel, const ON_PointCloud* pConstPointCloud, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddPointCloud2(IntPtr pModel, IntPtr pConstPointCloud, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddClippingPlane(ONX_Model* pModel, const ON_PLANE_STRUCT* plane, double du, double dv, int count, /*ARRAY*/const ON_UUID* clippedViewportIds, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddClippingPlane(IntPtr pModel, ref Plane plane, double du, double dv, int count, Guid[] clippedViewportIds, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddLinearDimension( ONX_Model* pModel, const ON_LinearDimension2* pConstDimension, const ON_3dmObjectAttributes* pConstAttributes )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddLinearDimension(IntPtr pModel, IntPtr pConstDimension, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddLine( ONX_Model* pModel, ON_3DPOINT_STRUCT pt0, ON_3DPOINT_STRUCT pt1, const ON_3dmObjectAttributes* pConstAttributes )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddLine(IntPtr pModel, Point3d pt0, Point3d pt1, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddPolyline( ONX_Model* pModel, int count, /*ARRAY*/const ON_3dPoint* points, const ON_3dmObjectAttributes* pConstAttributes )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddPolyline(IntPtr pModel, int count, Point3d[] points, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddArc(ONX_Model* pModel, ON_Arc* pArc, const ON_3dmObjectAttributes* pConstAttributes )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddArc(IntPtr pModel, ref Arc pArc, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddCircle(ONX_Model* pModel, const ON_CIRCLE_STRUCT* pCircle, const ON_3dmObjectAttributes* pConstAttributes )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddCircle(IntPtr pModel, ref Circle pCircle, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddEllipse(ONX_Model* pModel, ON_Ellipse* pEllipse, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddEllipse(IntPtr pModel, ref Ellipse pEllipse, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddSphere(ONX_Model* pModel, ON_Sphere* sphere, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddSphere(IntPtr pModel, ref Sphere sphere, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddCurve(ONX_Model* pModel, const ON_Curve* pConstCurve, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddCurve(IntPtr pModel, IntPtr pConstCurve, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddTextDot(ONX_Model* pModel, const ON_TextDot* pConstDot, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddTextDot(IntPtr pModel, IntPtr pConstDot, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddText(ONX_Model* pModel, const RHMONO_STRING* _text, const ON_PLANE_STRUCT* plane, double height, const RHMONO_STRING* _fontName, int fontStyle, int justification, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddText(IntPtr pModel, [MarshalAs(UnmanagedType.LPWStr)]string _text, ref Plane plane, double height, [MarshalAs(UnmanagedType.LPWStr)]string _fontName, int fontStyle, int justification, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddSurface(ONX_Model* pModel, const ON_Surface* pConstSurface, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddSurface(IntPtr pModel, IntPtr pConstSurface, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddExtrusion(ONX_Model* pModel, const ON_Extrusion* pConstExtrusion, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddExtrusion(IntPtr pModel, IntPtr pConstExtrusion, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddMesh(ONX_Model* pModel, const ON_Mesh* pConstMesh, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddMesh(IntPtr pModel, IntPtr pConstMesh, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddBrep(ONX_Model* pModel, const ON_Brep* pConstBrep, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddBrep(IntPtr pModel, IntPtr pConstBrep, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddLeader(ONX_Model* pModel, const RHMONO_STRING* _text, const ON_PLANE_STRUCT* plane, int count, /*ARRAY*/const ON_2dPoint* points2d, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddLeader(IntPtr pModel, [MarshalAs(UnmanagedType.LPWStr)]string _text, ref Plane plane, int count, Point2d[] points2d, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddHatch(ONX_Model* pModel, const ON_Hatch* pConstHatch, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddHatch(IntPtr pModel, IntPtr pConstHatch, IntPtr pConstAttributes);

  //ON_UUID ONX_Model_ObjectTable_AddPolyLine(ONX_Model* pModel, int count, /*ARRAY*/const ON_3dPoint* points, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ObjectTable_AddPolyLine(IntPtr pModel, int count, Point3d[] points, IntPtr pConstAttributes);

  //bool ONX_Model_ObjectTable_Delete(ONX_Model* pModel, ON_UUID object_id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ONX_Model_ObjectTable_Delete(IntPtr pModel, Guid object_id);

  //void ONX_Model_BoundingBox(const ONX_Model* pConstModel, ON_BoundingBox* pBBox)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_BoundingBox(IntPtr pConstModel, ref BoundingBox pBBox);

  //ON_Linetype* ONX_Model_GetLinetypePointer(ONX_Model* pModel, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_GetLinetypePointer(IntPtr pModel, Guid id);

  //ON_Bitmap* ONX_Model_GetBitmapPointer(ONX_Model* pModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_GetBitmapPointer(IntPtr pModel, int index);

  //ON_Layer* ONX_Model_GetLayerPointer(ONX_Model* pModel, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_GetLayerPointer(IntPtr pModel, Guid id);

  //ON_DimStyle* ONX_Model_GetDimStylePointer(ONX_Model* pModel, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_GetDimStylePointer(IntPtr pModel, Guid id);

  //ON_HatchPattern* ONX_Model_GetHatchPatternPointer(ONX_Model* pModel, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_GetHatchPatternPointer(IntPtr pModel, Guid id);

  //ON_Material* ONX_Model_GetMaterialPointer(ONX_Model* pModel, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_GetMaterialPointer(IntPtr pModel, Guid id);

  //void ONX_Model_LinetypeTable_Insert(ONX_Model* pModel, const ON_Linetype* pConstLinetype, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_LinetypeTable_Insert(IntPtr pModel, IntPtr pConstLinetype, int index);

  //void ONX_Model_LayerTable_Insert(ONX_Model* pModel, const ON_Layer* pConstLayer, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_LayerTable_Insert(IntPtr pModel, IntPtr pConstLayer, int index);

  //void ONX_Model_DimStyleTable_Insert(ONX_Model* pModel, const ON_DimStyle* pConstDimStyle, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_DimStyleTable_Insert(IntPtr pModel, IntPtr pConstDimStyle, int index);

  //void ONX_Model_HatchPatternTable_Insert(ONX_Model* pModel, const ON_HatchPattern* pConstHatchPattern, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_HatchPatternTable_Insert(IntPtr pModel, IntPtr pConstHatchPattern, int index);

  //void ONX_Model_InstanceDefinitionTable_Insert(ONX_Model* pModel, const ON_InstanceDefinition* pConstInstanceDefinition, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_InstanceDefinitionTable_Insert(IntPtr pModel, IntPtr pConstInstanceDefinition, int index);

  //void ONX_Model_MaterialTable_Insert(ONX_Model* pModel, const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_MaterialTable_Insert(IntPtr pModel, IntPtr pConstMaterial, int index);

  //void ONX_Model_LinetypeTable_RemoveAt(ONX_Model* pModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_LinetypeTable_RemoveAt(IntPtr pModel, int index);

  //void ONX_Model_LayerTable_RemoveAt(ONX_Model* pModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_LayerTable_RemoveAt(IntPtr pModel, int index);

  //void ONX_Model_DimStyleTable_RemoveAt(ONX_Model* pModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_DimStyleTable_RemoveAt(IntPtr pModel, int index);

  //void ONX_Model_HatchPatternTable_RemoveAt(ONX_Model* pModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_HatchPatternTable_RemoveAt(IntPtr pModel, int index);

  //void ONX_Model_InstanceDefinitionTable_RemoveAt(ONX_Model* pModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_InstanceDefinitionTable_RemoveAt(IntPtr pModel, int index);

  //void ONX_Model_MaterialTable_RemoveAt(ONX_Model* pModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_MaterialTable_RemoveAt(IntPtr pModel, int index);

  //ON_UUID ONX_Model_LinetypeTable_Id(const ONX_Model* pConstModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_LinetypeTable_Id(IntPtr pConstModel, int index);

  //ON_UUID ONX_Model_LayerTable_Id(const ONX_Model* pConstModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_LayerTable_Id(IntPtr pConstModel, int index);

  //ON_UUID ONX_Model_DimStyleTable_Id(const ONX_Model* pConstModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_DimStyleTable_Id(IntPtr pConstModel, int index);

  //ON_UUID ONX_Model_HatchPatternTable_Id(const ONX_Model* pConstModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_HatchPatternTable_Id(IntPtr pConstModel, int index);

  //ON_UUID ONX_Model_InstanceDefinitionTable_Id(const ONX_Model* pConstModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_InstanceDefinitionTable_Id(IntPtr pConstModel, int index);

  //int ONX_Model_InstanceDefinitionTable_Index(const ONX_Model* pConstModel, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ONX_Model_InstanceDefinitionTable_Index(IntPtr pConstModel, Guid id);

  //const ON_InstanceDefinition* ONX_Model_GetInstanceDefinitionPointer(const ONX_Model* pConstModel, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_GetInstanceDefinitionPointer(IntPtr pConstModel, Guid id);

  //ON_UUID ONX_Model_MaterialTable_Id(const ONX_Model* pConstModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_MaterialTable_Id(IntPtr pConstModel, int index);

  //void ONX_Model_TableClear(ONX_Model* pModel, int which_table)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_TableClear(IntPtr pModel, int which_table);

  //void ONX_Model_GetString( const ONX_Model* pConstModel, int which, CRhCmnStringHolder* pString )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_GetString(IntPtr pConstModel, int which, IntPtr pString);

  //void ONX_Model_SetString( ONX_Model* pModel, int which, const RHMONO_STRING* str )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_SetString(IntPtr pModel, int which, [MarshalAs(UnmanagedType.LPWStr)]string str);

  //int ONX_Model_GetRevision(const ONX_Model* pConstModel)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ONX_Model_GetRevision(IntPtr pConstModel);

  //void ONX_Model_SetRevision(ONX_Model* pModel, int rev)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_SetRevision(IntPtr pModel, int rev);

  //ON_3dmSettings* ONX_Model_3dmSettingsPointer(ONX_Model* pModel)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_3dmSettingsPointer(IntPtr pModel);

  //ON_3dmView* ONX_Model_ViewPointer(ONX_Model* pModel, ON_UUID id, const ON_3dmView* pConstView, bool named_view_table)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_ViewPointer(IntPtr pModel, Guid id, IntPtr pConstView, [MarshalAs(UnmanagedType.U1)]bool named_view_table);

  //ON_3dmView* ONX_Model_ViewTable_Pointer(ONX_Model* pModel, int index, bool named_view_table)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_ViewTable_Pointer(IntPtr pModel, int index, [MarshalAs(UnmanagedType.U1)]bool named_view_table);

  //ON_UUID ONX_Model_ViewTable_Id(const ONX_Model* pConstModel, int index, bool named_view_table)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_ViewTable_Id(IntPtr pConstModel, int index, [MarshalAs(UnmanagedType.U1)]bool named_view_table);

  //void ONX_Model_ViewTable_Clear(ONX_Model* pModel, bool named_view_table)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_ViewTable_Clear(IntPtr pModel, [MarshalAs(UnmanagedType.U1)]bool named_view_table);

  //int ONX_Model_ViewTable_Index(const ONX_Model* pConstModel, const ON_3dmView* pConstView, bool named_view_table)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ONX_Model_ViewTable_Index(IntPtr pConstModel, IntPtr pConstView, [MarshalAs(UnmanagedType.U1)]bool named_view_table);

  //void ONX_Model_ViewTable_Insert(ONX_Model* pModel, const ON_3dmView* pConstView, int index, bool named_view_table)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_ViewTable_Insert(IntPtr pModel, IntPtr pConstView, int index, [MarshalAs(UnmanagedType.U1)]bool named_view_table);

  //void ONX_Model_ViewTable_RemoveAt(ONX_Model* pModel, int index, bool named_view_table)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_ViewTable_RemoveAt(IntPtr pModel, int index, [MarshalAs(UnmanagedType.U1)]bool named_view_table);

  //ON_UUID ONX_Model_UserDataTable_Uuid(const ONX_Model* pConstModel, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ONX_Model_UserDataTable_Uuid(IntPtr pConstModel, int index);

  //void ONX_Model_UserDataTable_Clear(ONX_Model* pModel)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ONX_Model_UserDataTable_Clear(IntPtr pModel);

  //CBinaryFileHelper* ON_BinaryFile_Open(const RHMONO_STRING* path, int mode)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BinaryFile_Open([MarshalAs(UnmanagedType.LPWStr)]string path, int mode);

  //void ON_BinaryFile_Close(CBinaryFileHelper* pBinaryFile)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BinaryFile_Close(IntPtr pBinaryFile);

  //ONX_Model* ONX_Model_ReadFile2(const RHMONO_STRING* path, ReadFileTableTypeFilter tableFilter, ObjectTypeFilter objectTypeFilter, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONX_Model_ReadFile2([MarshalAs(UnmanagedType.LPWStr)]string path, ReadFileTableTypeFilter tableFilter, ObjectTypeFilter objectTypeFilter, IntPtr pStringHolder);

  internal enum ReadFileTableTypeFilter : int
  {
    None = 0,
    PropertiesTable          = 0x000001,
    SettingsTable            = 0x000002,
    BitmapTable              = 0x000004,
    TextureMappingTable      = 0x000008,
    MaterialTable            = 0x000010,
    LinetypeTable            = 0x000020,
    LayerTable               = 0x000040,
    GroupTable               = 0x000080,
    FontTable                = 0x000100,
    FutureFontTable          = 0x000200,
    DimstyleTable            = 0x000400,
    LightTable               = 0x000800,
    HatchpatternTable        = 0x001000,
    InstanceDefinitionTable  = 0x002000,
    ObjectTable              = 0x004000,
    HistoryrecordTable       = 0x008000,
    UserTable                = 0x010000
  }

  internal enum ObjectTypeFilter : uint
  {
    None  =          0,
    Point         =          1, // some type of ON_Point
    Pointset      =          2, // some type of ON_PointCloud, ON_PointGrid, ...
    Curve         =          4, // some type of ON_Curve like ON_LineCurve, ON_NurbsCurve, etc.
    Surface       =          8, // some type of ON_Surface like ON_PlaneSurface, ON_NurbsSurface, etc.
    Brep          =       0x10, // some type of ON_Brep
    Mesh          =       0x20, // some type of ON_Mesh
    Annotation    =      0x200, // some type of ON_Annotation
    InstanceDefinition  =      0x800, // some type of ON_InstanceDefinition
    InstanceReference   =     0x1000, // some type of ON_InstanceRef
    TextDot             =     0x2000, // some type of ON_TextDot
    Detail        =     0x8000, // some type of ON_DetailView
    Hatch         =    0x10000, // some type of ON_Hatch
    Extrusion     = 0x40000000, // some type of ON_Extrusion
    Any           = 0xFFFFFFFF
  }
  #endregion


  #region on_array.cpp
  //ON_SimpleArray<ON_Line>* ON_LineArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineArray_New();

  //void ON_LineArray_Delete( ON_SimpleArray<ON_Line>* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LineArray_Delete(IntPtr pArray);

  //int ON_LineArray_Count( const ON_SimpleArray<ON_Line>* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_LineArray_Count(IntPtr pArray);

  //void ON_LineArray_CopyValues( const ON_SimpleArray<ON_Line>* pArray, ON_Line* lines )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LineArray_CopyValues(IntPtr pArray, ref Line lines);

  //ON_SimpleArray<ON_COMPONENT_INDEX>* ON_ComponentIndexArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ComponentIndexArray_New();

  //void ON_ComponentIndexArray_Delete( ON_SimpleArray<ON_COMPONENT_INDEX>* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ComponentIndexArray_Delete(IntPtr pArray);

  //int ON_ComponentIndexArray_Count( const ON_SimpleArray<ON_COMPONENT_INDEX>* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_ComponentIndexArray_Count(IntPtr pArray);

  //void ON_ComponentIndexArray_CopyValues( const ON_SimpleArray<ON_COMPONENT_INDEX>* pArray, ON_COMPONENT_INDEX* ci )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ComponentIndexArray_CopyValues(IntPtr pArray, ref ComponentIndex ci);

  //ON_2dPointArray* ON_2dPointArray_New(int capacity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_2dPointArray_New(int capacity);

  //void ON_2dPointArray_Delete( ON_2dPointArray* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_2dPointArray_Delete(IntPtr pArray);

  //int ON_2dPointArray_Count( const ON_2dPointArray* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_2dPointArray_Count(IntPtr pArray);

  //void ON_2dPointArray_CopyValues( const ON_2dPointArray* pArray, /*ARRAY*/ON_2dPoint* pts )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_2dPointArray_CopyValues(IntPtr pArray, [In,Out] Point2d[] pts);

  //ON_3dPointArray* ON_3dPointArray_New(int capacity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dPointArray_New(int capacity);

  //void ON_3dPointArray_Delete( ON_3dPointArray* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dPointArray_Delete(IntPtr pArray);

  //int ON_3dPointArray_Count( const ON_3dPointArray* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dPointArray_Count(IntPtr pArray);

  //void ON_3dPointArray_CopyValues( const ON_3dPointArray* pArray, /*ARRAY*/ON_3dPoint* pts )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dPointArray_CopyValues(IntPtr pArray, [In,Out] Point3d[] pts);

  //ON_SimpleArray<int>* ON_IntArray_New(/*ARRAY*/const int* vals, int count)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_IntArray_New(int[] vals, int count);

  //void ON_IntArray_CopyValues(const ON_SimpleArray<int>* ptr, /*ARRAY*/int* vals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_IntArray_CopyValues(IntPtr ptr, [In,Out] int[] vals);

  //int ON_IntArray_Count(const ON_SimpleArray<int>* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_IntArray_Count(IntPtr ptr);

  //void ON_IntArray_Delete(ON_SimpleArray<int>* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_IntArray_Delete(IntPtr p);

  //ON_SimpleArray<ON_UUID>* ON_UUIDArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_UUIDArray_New();

  //void ON_UUIDArray_CopyValues(const ON_SimpleArray<ON_UUID>* ptr, /*ARRAY*/ON_UUID* vals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UUIDArray_CopyValues(IntPtr ptr, [In,Out] Guid[] vals);

  //int ON_UUIDArray_Count(const ON_SimpleArray<ON_UUID>* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_UUIDArray_Count(IntPtr ptr);

  //void ON_UUIDArray_Delete(ON_SimpleArray<ON_UUID>* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UUIDArray_Delete(IntPtr p);

  //ON_SimpleArray<double>* ON_DoubleArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_DoubleArray_New();

  //int ON_DoubleArray_Count(const ON_SimpleArray<double>* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_DoubleArray_Count(IntPtr ptr);

  //void ON_DoubleArray_Append(ON_SimpleArray<double>* pArray, int count, /*ARRAY*/const double* vals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DoubleArray_Append(IntPtr pArray, int count, double[] vals);

  //void ON_DoubleArray_CopyValues(const ON_SimpleArray<double>* ptr, double* vals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DoubleArray_CopyValues(IntPtr ptr, ref double vals);

  //void ON_DoubleArray_Delete(ON_SimpleArray<double>* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DoubleArray_Delete(IntPtr p);

  //ON_SimpleArray<ON_Brep*>* ON_BrepArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepArray_New();

  //void ON_BrepArray_Delete(ON_SimpleArray<ON_Brep*>* pBrepArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BrepArray_Delete(IntPtr pBrepArray);

  //int ON_BrepArray_Count(const ON_SimpleArray<ON_Brep*>* pBrepArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepArray_Count(IntPtr pBrepArray);

  //void ON_BrepArray_Append(ON_SimpleArray<ON_Brep*>* pBrepArray, ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BrepArray_Append(IntPtr pBrepArray, IntPtr pBrep);

  //ON_Brep* ON_BrepArray_Get(ON_SimpleArray<ON_Brep*>* pBrepArray, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepArray_Get(IntPtr pBrepArray, int index);

  //ON_SimpleArray<ON_Mesh*>* ON_MeshArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_MeshArray_New();

  //void ON_MeshArray_Delete(ON_SimpleArray<ON_Mesh*>* pMeshArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshArray_Delete(IntPtr pMeshArray);

  //int ON_MeshArray_Count(const ON_SimpleArray<ON_Mesh*>* pMeshArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_MeshArray_Count(IntPtr pMeshArray);

  //void ON_MeshArray_Append(ON_SimpleArray<ON_Mesh*>* pMeshArray, ON_Mesh* pMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshArray_Append(IntPtr pMeshArray, IntPtr pMesh);

  //ON_Mesh* ON_MeshArray_Get(ON_SimpleArray<ON_Mesh*>* pMeshArray, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_MeshArray_Get(IntPtr pMeshArray, int index);

  //ON_ClassArray<ON_wString>* ON_StringArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_StringArray_New();

  //void ON_StringArray_Append(ON_ClassArray<ON_wString>* pStrings, const RHMONO_STRING* str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_StringArray_Append(IntPtr pStrings, [MarshalAs(UnmanagedType.LPWStr)]string str);

  //void ON_StringArray_Delete(ON_ClassArray<ON_wString>* pStrings)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_StringArray_Delete(IntPtr pStrings);

  //void ON_StringArray_Get(const ON_ClassArray<ON_wString>* pStrings, int index, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_StringArray_Get(IntPtr pStrings, int index, IntPtr pStringHolder);

  //ON_SimpleArray<ON_Surface*>* ON_SurfaceArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_SurfaceArray_New();

  //void ON_SurfaceArray_Delete(ON_SimpleArray<ON_Surface*>* pSurfaceArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_SurfaceArray_Delete(IntPtr pSurfaceArray);

  //int ON_SurfaceArray_Count(const ON_SimpleArray<ON_Surface*>* pSurfaceArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_SurfaceArray_Count(IntPtr pSurfaceArray);

  //ON_Surface* ON_SurfaceArray_Get(ON_SimpleArray<ON_Surface*>* pSurfaceArray, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_SurfaceArray_Get(IntPtr pSurfaceArray, int index);

  //ON_SimpleArray<ON_Interval>* ON_IntervalArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_IntervalArray_New();

  //void ON_IntervalArray_Delete(ON_SimpleArray<ON_Interval>* pIntervalArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_IntervalArray_Delete(IntPtr pIntervalArray);

  //int ON_IntervalArray_Count(const ON_SimpleArray<ON_Interval>* pConstIntervalArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_IntervalArray_Count(IntPtr pConstIntervalArray);

  //void ON_IntervalArray_CopyValues(const ON_SimpleArray<ON_Interval>* pSrcIntervalArray, /*ARRAY*/ON_Interval* dest)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_IntervalArray_CopyValues(IntPtr pSrcIntervalArray, [In,Out] Interval[] dest);

  //ON_SimpleArray<ON_BezierCurve*>* ON_SimpleArray_BezierCurveNew()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_SimpleArray_BezierCurveNew();

  //void ON_SimpleArray_BezierCurveDelete(ON_SimpleArray<ON_BezierCurve*>* pBezArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_SimpleArray_BezierCurveDelete(IntPtr pBezArray);

  //ON_BezierCurve* ON_SimpleArray_BezierCurvePtr(ON_SimpleArray<ON_BezierCurve*>* pBezArray, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_SimpleArray_BezierCurvePtr(IntPtr pBezArray, int index);

  //void ON_BezierCurve_Delete(ON_BezierCurve* pBez)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BezierCurve_Delete(IntPtr pBez);

  //ON_SimpleArray<ON_Curve*>* ON_CurveArray_New(int initial_capacity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_CurveArray_New(int initial_capacity);

  //void ON_CurveArray_Append(ON_SimpleArray<ON_Curve*>* arrayPtr, ON_Curve* curvePtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_CurveArray_Append(IntPtr arrayPtr, IntPtr curvePtr);

  //int ON_CurveArray_Count(const ON_SimpleArray<ON_Curve*>* arrayPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_CurveArray_Count(IntPtr arrayPtr);

  //ON_Curve* ON_CurveArray_Get(ON_SimpleArray<ON_Curve*>* arrayPtr, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_CurveArray_Get(IntPtr arrayPtr, int index);

  //void ON_CurveArray_Delete(ON_SimpleArray<ON_Curve*>* arrayPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_CurveArray_Delete(IntPtr arrayPtr);

  //ON_ClassArray<ON_ObjRef>* ON_ClassArrayON_ObjRef_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ClassArrayON_ObjRef_New();

  //int ON_ClassArrayON_ObjRef_Count(const ON_ClassArray<ON_ObjRef>* pConstObjRefArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_ClassArrayON_ObjRef_Count(IntPtr pConstObjRefArray);

  //void ON_ClassArrayON_ObjRef_Append(ON_ClassArray<ON_ObjRef>* pObjRefArray, const ON_ObjRef* pConstObjRef)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ClassArrayON_ObjRef_Append(IntPtr pObjRefArray, IntPtr pConstObjRef);

  //void ON_ClassArrayON_ObjRef_Delete(ON_ClassArray<ON_ObjRef>* pObjRefArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ClassArrayON_ObjRef_Delete(IntPtr pObjRefArray);

  //const ON_ObjRef* ON_ClassArrayON_ObjRef_Get(const ON_ClassArray<ON_ObjRef>* pConstObjRefArray, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ClassArrayON_ObjRef_Get(IntPtr pConstObjRefArray, int index);
  #endregion


  #region on_beam.cpp
  //ON_Extrusion* ON_Extrusion_New(const ON_Extrusion* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_New(IntPtr pOther);

  //ON_Brep* ON_Extrusion_BrepForm(const ON_Extrusion* pConstExtrusion, bool splitKinkyFaces)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_BrepForm(IntPtr pConstExtrusion, [MarshalAs(UnmanagedType.U1)]bool splitKinkyFaces);

  //bool ON_Extrusion_SetPathAndUp( ON_Extrusion* pExtrusion, ON_3DPOINT_STRUCT a, ON_3DPOINT_STRUCT b, ON_3DVECTOR_STRUCT up )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_SetPathAndUp(IntPtr pExtrusion, Point3d a, Point3d b, Vector3d up);

  //void ON_Extrusion_GetPoint( const ON_Extrusion* pConstExtrusion, bool pathStart, ON_3dPoint* pt )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Extrusion_GetPoint(IntPtr pConstExtrusion, [MarshalAs(UnmanagedType.U1)]bool pathStart, ref Point3d pt);

  //void ON_Extrusion_GetPathTangent(const ON_Extrusion* pConstExtrusion, ON_3dVector* vec)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Extrusion_GetPathTangent(IntPtr pConstExtrusion, ref Vector3d vec);

  //void ON_Extrusion_GetMiterPlaneNormal(const ON_Extrusion* pConstExtrusion, int end, ON_3dVector* normal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Extrusion_GetMiterPlaneNormal(IntPtr pConstExtrusion, int end, ref Vector3d normal);

  //void ON_Extrusion_SetMiterPlaneNormal(ON_Extrusion* pExtrusion, int end, ON_3DVECTOR_STRUCT normal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Extrusion_SetMiterPlaneNormal(IntPtr pExtrusion, int end, Vector3d normal);

  //int ON_Extrusion_IsMitered(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_IsMitered(IntPtr pConstExtrusion);

  //bool ON_Extrusion_IsSolid(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_IsSolid(IntPtr pConstExtrusion);

  //int ON_Extrusion_IsCapped(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_IsCapped(IntPtr pConstExtrusion);

  //int ON_Extrusion_CapCount(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_CapCount(IntPtr pConstExtrusion);

  //ON_Extrusion* ON_Extrusion_CreateCylinder(const ON_Cylinder* cylinder, bool capBottom, bool capTop)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_CreateCylinder(ref Cylinder cylinder, [MarshalAs(UnmanagedType.U1)]bool capBottom, [MarshalAs(UnmanagedType.U1)]bool capTop);

  //ON_Extrusion* ON_Extrusion_CreatePipe(const ON_Cylinder* cylinder, double otherRadius, bool capBottom, bool capTop)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_CreatePipe(ref Cylinder cylinder, double otherRadius, [MarshalAs(UnmanagedType.U1)]bool capBottom, [MarshalAs(UnmanagedType.U1)]bool capTop);

  //bool ON_Extrusion_GetProfileTransformation(const ON_Extrusion* pConstExtrusion, double s, ON_Xform* xform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_GetProfileTransformation(IntPtr pConstExtrusion, double s, ref Transform xform);

  //bool ON_Extrusion_GetPlane(const ON_Extrusion* pConstExtrusion, bool profilePlane, double s, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_GetPlane(IntPtr pConstExtrusion, [MarshalAs(UnmanagedType.U1)]bool profilePlane, double s, ref Plane plane);

  //bool ON_Extrusion_SetOuterProfile(ON_Extrusion* pExtrusion, const ON_Curve* pCurve, bool cap)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_SetOuterProfile(IntPtr pExtrusion, IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool cap);

  //bool ON_Extrusion_AddInnerProfile(ON_Extrusion* pExtrusion, const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_AddInnerProfile(IntPtr pExtrusion, IntPtr pCurve);

  //int ON_Extrusion_ProfileCount(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_ProfileCount(IntPtr pConstExtrusion);

  //ON_Curve* ON_Extrusion_Profile3d(const ON_Extrusion* pConstExtrusion, int profileIndex, double s)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_Profile3d(IntPtr pConstExtrusion, int profileIndex, double s);

  //ON_Curve* ON_Extrusion_Profile3d2(const ON_Extrusion* pConstExtrusion, ON_2INTS componentIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_Profile3d2(IntPtr pConstExtrusion, ComponentIndex componentIndex);

  //ON_Curve* ON_Extrusion_WallEdge(const ON_Extrusion* pConstExtrusion, ON_2INTS componentIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_WallEdge(IntPtr pConstExtrusion, ComponentIndex componentIndex);

  //ON_Surface* ON_Extrusion_WallSurface(const ON_Extrusion* pConstExtrusion, ON_2INTS componentIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_WallSurface(IntPtr pConstExtrusion, ComponentIndex componentIndex);

  //ON_LineCurve* ON_Extrusion_PathLineCurve(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_PathLineCurve(IntPtr pConstExtrusion);

  //int ON_Extrusion_ProfileIndex(const ON_Extrusion* pConstExtrusion, double profile_parameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_ProfileIndex(IntPtr pConstExtrusion, double profile_parameter);

  //ON_Extrusion* ON_Extrusion_CreateFrom3dCurve(const ON_Curve* pConstCurve, double height, bool cap)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_CreateFrom3dCurve(IntPtr pConstCurve, double height, [MarshalAs(UnmanagedType.U1)]bool cap);

  //const ON_Mesh* ON_Extrusion_GetMesh(const ON_Extrusion* pConstExtrusion, int meshtype)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_GetMesh(IntPtr pConstExtrusion, int meshtype);
  #endregion


  #region on_bezier.cpp
  //ON_BezierCurve* ON_BezierCurve_New2d(int count, /*ARRAY*/const ON_2dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BezierCurve_New2d(int count, Point2d[] points);

  //ON_BezierCurve* ON_BezierCurve_New3d(int count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BezierCurve_New3d(int count, Point3d[] points);

  //ON_BezierCurve* ON_BezierCurve_New4d(int count, /*ARRAY*/const ON_4dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BezierCurve_New4d(int count, Point4d[] points);

  //bool ON_BezierCurve_IsValid(const ON_BezierCurve* pConstBezierCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BezierCurve_IsValid(IntPtr pConstBezierCurve);

  //void ON_BezierCurve_Dump(const ON_BezierCurve* pConstBezierCurve, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BezierCurve_Dump(IntPtr pConstBezierCurve, IntPtr pStringHolder);

  //int ON_BezierCurve_Dimension(const ON_BezierCurve* pConstBezierCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BezierCurve_Dimension(IntPtr pConstBezierCurve);

  //ON_BezierCurve* ON_BezierCurve_Loft(int count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BezierCurve_Loft(int count, Point3d[] points);

  //ON_BezierCurve* ON_BezierCurve_Loft2(int count, /*ARRAY*/const ON_2dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BezierCurve_Loft2(int count, Point2d[] points);

  //void ON_BezierCurve_BoundingBox(const ON_BezierCurve* pConstBezierCurve, bool accurate, ON_BoundingBox* bounding_box)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BezierCurve_BoundingBox(IntPtr pConstBezierCurve, [MarshalAs(UnmanagedType.U1)]bool accurate, ref BoundingBox bounding_box);

  //void ON_BezierCurve_PointAt(const ON_BezierCurve* pConstBezierCurve, double t, ON_3dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BezierCurve_PointAt(IntPtr pConstBezierCurve, double t, ref Point3d point);

  //void ON_BezierCurve_TangentAt(const ON_BezierCurve* pConstBezierCurve, double t, ON_3dVector* tangent)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BezierCurve_TangentAt(IntPtr pConstBezierCurve, double t, ref Vector3d tangent);

  //void ON_BezierCurve_CurvatureAt(const ON_BezierCurve* pConstBezierCurve, double t, ON_3dVector* tangent)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BezierCurve_CurvatureAt(IntPtr pConstBezierCurve, double t, ref Vector3d tangent);

  //ON_NurbsCurve* ON_BezierCurve_GetNurbForm(const ON_BezierCurve* pConstBezierCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BezierCurve_GetNurbForm(IntPtr pConstBezierCurve);

  //bool ON_BezierCurve_IsRational(const ON_BezierCurve* pConstBezierCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BezierCurve_IsRational(IntPtr pConstBezierCurve);

  //int ON_BezierCurve_CVCount(const ON_BezierCurve* pConstBezierCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BezierCurve_CVCount(IntPtr pConstBezierCurve);

  //bool ON_BezierCurve_GetCV3d(const ON_BezierCurve* pConstBezierCurve, int index, ON_3dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BezierCurve_GetCV3d(IntPtr pConstBezierCurve, int index, ref Point3d point);

  //bool ON_BezierCurve_GetCV4d(const ON_BezierCurve* pConstBezierCurve, int index, ON_4dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BezierCurve_GetCV4d(IntPtr pConstBezierCurve, int index, ref Point4d point);

  //bool ON_BezierCurve_MakeRational(ON_BezierCurve* pBezierCurve, bool on)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BezierCurve_MakeRational(IntPtr pBezierCurve, [MarshalAs(UnmanagedType.U1)]bool on);

  //bool ON_BezierCurve_ChangeInt(ON_BezierCurve* pBezierCurve, bool degree, int newInt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BezierCurve_ChangeInt(IntPtr pBezierCurve, [MarshalAs(UnmanagedType.U1)]bool degree, int newInt);
  #endregion


  #region on_brep.cpp
  //double ON_BrepEdge_GetTolerance(const ON_BrepEdge* pConstBrepEdge)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_BrepEdge_GetTolerance(IntPtr pConstBrepEdge);

  //void ON_BrepEdge_SetTolerance(ON_BrepEdge* pBrepEdge, double tol)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BrepEdge_SetTolerance(IntPtr pBrepEdge, double tol);

  //int ON_BrepTrim_Type(const ON_Brep* pConstBrep, int trim_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepTrim_Type(IntPtr pConstBrep, int trim_index);

  //void ON_BrepTrim_SetType(ON_Brep* pBrep, int trim_index, int trimtype)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BrepTrim_SetType(IntPtr pBrep, int trim_index, int trimtype);

  //int ON_BrepTrim_Iso(const ON_Brep* pConstBrep, int trim_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepTrim_Iso(IntPtr pConstBrep, int trim_index);

  //void ON_BrepTrim_SetIso(ON_Brep* pBrep, int trim_index, int iso)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BrepTrim_SetIso(IntPtr pBrep, int trim_index, int iso);

  //double ON_BrepTrim_Tolerance(const ON_Brep* pConstBrep, int trim_index, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_BrepTrim_Tolerance(IntPtr pConstBrep, int trim_index, int which);

  //void ON_BrepTrim_SetTolerance(ON_Brep* pBrep, int trim_index, int which, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BrepTrim_SetTolerance(IntPtr pBrep, int trim_index, int which, double tolerance);

  //int ON_BrepTrim_ItemIndex(const ON_Brep* pConstBrep, int trim_index, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepTrim_ItemIndex(IntPtr pConstBrep, int trim_index, int which);

  //int ON_BrepLoop_FaceIndex(const ON_Brep* pConstBrep, int loop_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepLoop_FaceIndex(IntPtr pConstBrep, int loop_index);

  //int ON_BrepLoop_TrimIndex(const ON_BrepLoop* pConstLoop, int trim_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepLoop_TrimIndex(IntPtr pConstLoop, int trim_index);

  //int ON_BrepLoop_TrimCount(const ON_BrepLoop* pConstLoop)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepLoop_TrimCount(IntPtr pConstLoop);

  //int ON_BrepLoop_Type(const ON_Brep* pConstBrep, int loop_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepLoop_Type(IntPtr pConstBrep, int loop_index);

  //ON_BrepLoop* ON_BrepLoop_GetPointer(const ON_Brep* pConstBrep, int loop_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepLoop_GetPointer(IntPtr pConstBrep, int loop_index);

  //ON_Curve* ON_BrepLoop_GetCurve3d(const ON_Brep* pConstBrep, int loop_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepLoop_GetCurve3d(IntPtr pConstBrep, int loop_index);

  //ON_Curve* ON_BrepLoop_GetCurve2d(const ON_Brep* pConstBrep, int loop_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepLoop_GetCurve2d(IntPtr pConstBrep, int loop_index);

  //int ON_BrepFace_LoopCount(const ON_BrepFace* pConstBrepFace)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepFace_LoopCount(IntPtr pConstBrepFace);

  //int ON_BrepFace_LoopIndex(const ON_BrepFace* pConstBrepFace, int index_in_face)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepFace_LoopIndex(IntPtr pConstBrepFace, int index_in_face);

  //int ON_BrepFace_OuterLoopIndex(const ON_BrepFace* pConstBrepFace)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepFace_OuterLoopIndex(IntPtr pConstBrepFace);

  //ON_Brep* ON_BrepFace_BrepExtrudeFace(const ON_Brep* pConstBrep, int face_index, const ON_Curve* pConstCurve, bool bCap)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepFace_BrepExtrudeFace(IntPtr pConstBrep, int face_index, IntPtr pConstCurve, [MarshalAs(UnmanagedType.U1)]bool bCap);

  //int ON_BrepFace_SurfaceIndex(const ON_BrepFace* pConstBrepFace)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepFace_SurfaceIndex(IntPtr pConstBrepFace);

  //ON_Brep* ON_Brep_New(const ON_Brep* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_New(IntPtr pOther);

  //bool ON_Brep_IsDuplicate(const ON_Brep* pConstBrep1, const ON_Brep* pConstBrep2, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_IsDuplicate(IntPtr pConstBrep1, IntPtr pConstBrep2, double tolerance);

  //bool ON_Brep_IsValidTest(const ON_Brep* pConstBrep, int which_test, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_IsValidTest(IntPtr pConstBrep, int which_test, IntPtr pStringHolder);

  //ON_Brep* ONC_BrepFromMesh( const ON_Mesh* pConstMesh, bool bTrimmedTriangles)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONC_BrepFromMesh(IntPtr pConstMesh, [MarshalAs(UnmanagedType.U1)]bool bTrimmedTriangles);

  //ON_Brep* ON_Brep_FromBox( ON_3DPOINT_STRUCT boxmin, ON_3DPOINT_STRUCT boxmax)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_FromBox(Point3d boxmin, Point3d boxmax);

  //ON_Brep* ON_Brep_FromBox2( /*ARRAY*/const ON_3dPoint* corners )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_FromBox2(Point3d[] corners);

  //ON_Brep* ON_Brep_FromCylinder(ON_Cylinder* cylinder, bool capBottom, bool capTop)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_FromCylinder(ref Cylinder cylinder, [MarshalAs(UnmanagedType.U1)]bool capBottom, [MarshalAs(UnmanagedType.U1)]bool capTop);

  //void ON_Brep_DuplicateEdgeCurves(const ON_Brep* pConstBrep, ON_SimpleArray<ON_Curve*>* pOutCurves, bool nakedOnly, bool nakedOuter, bool nakedInner)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_DuplicateEdgeCurves(IntPtr pConstBrep, IntPtr pOutCurves, [MarshalAs(UnmanagedType.U1)]bool nakedOnly, [MarshalAs(UnmanagedType.U1)]bool nakedOuter, [MarshalAs(UnmanagedType.U1)]bool nakedInner);

  //void ON_Brep_DuplicateVertices( const ON_Brep* pBrep, ON_3dPointArray* outPoints)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_DuplicateVertices(IntPtr pBrep, IntPtr outPoints);

  //void ON_Brep_Flip(ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_Flip(IntPtr pBrep);

  //bool ON_Brep_ShrinkFaces( ON_Brep* pBrep )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_ShrinkFaces(IntPtr pBrep);

  //int ON_Brep_GetInt(const ON_Brep* pConstBrep, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_GetInt(IntPtr pConstBrep, int which);

  //bool ON_Brep_FaceIsSurface(const ON_Brep* pConstBrep, int faceIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_FaceIsSurface(IntPtr pConstBrep, int faceIndex);

  //const ON_BrepFace* ON_Brep_BrepFacePointer( const ON_Brep* pConstBrep, int faceIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_BrepFacePointer(IntPtr pConstBrep, int faceIndex);

  //void ON_Brep_Compact(ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_Compact(IntPtr pBrep);

  //bool ON_BrepFace_IsReversed( const ON_BrepFace* pConstFace )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BrepFace_IsReversed(IntPtr pConstFace);

  //void ON_BrepFace_SetIsReversed( ON_BrepFace* pBrepFace, bool reversed )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BrepFace_SetIsReversed(IntPtr pBrepFace, [MarshalAs(UnmanagedType.U1)]bool reversed);

  //const ON_BrepEdge* ON_Brep_BrepEdgePointer( const ON_Brep* pConstBrep, int edgeIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_BrepEdgePointer(IntPtr pConstBrep, int edgeIndex);

  //const ON_BrepTrim* ON_Brep_BrepTrimPointer( const ON_Brep* pConstBrep, int trimIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_BrepTrimPointer(IntPtr pConstBrep, int trimIndex);

  //const ON_Surface* ON_Brep_BrepSurfacePointer( const ON_Brep* pConstBrep, int surfaceIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_BrepSurfacePointer(IntPtr pConstBrep, int surfaceIndex);

  //const ON_Curve* ON_Brep_BrepCurvePointer( const ON_Brep* pConstBrep, int curveIndex, bool c2 )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_BrepCurvePointer(IntPtr pConstBrep, int curveIndex, [MarshalAs(UnmanagedType.U1)]bool c2);

  //int ON_Brep_AddCurve( ON_Brep* pBrep, const ON_Curve* pConstCurve, bool c2 )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_AddCurve(IntPtr pBrep, IntPtr pConstCurve, [MarshalAs(UnmanagedType.U1)]bool c2);

  //ON_Brep* ON_Brep_FromSurface( const ON_Surface* pConstSurface )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_FromSurface(IntPtr pConstSurface);

  //ON_Brep* ON_Brep_DuplicateFace( const ON_Brep* pConstBrep, int faceIndex, bool duplicateMeshes )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_DuplicateFace(IntPtr pConstBrep, int faceIndex, [MarshalAs(UnmanagedType.U1)]bool duplicateMeshes);

  //ON_Surface* ON_Brep_DuplicateFaceSurface( const ON_Brep* pConstBrep, int faceIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_DuplicateFaceSurface(IntPtr pConstBrep, int faceIndex);

  //const ON_Surface* ON_BrepFace_SurfaceOf( const ON_Brep* pConstBrep, int faceIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepFace_SurfaceOf(IntPtr pConstBrep, int faceIndex);

  //const ON_Mesh* ON_BrepFace_Mesh( const ON_Brep* pConstBrep, int faceIndex, int meshtype )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepFace_Mesh(IntPtr pConstBrep, int faceIndex, int meshtype);

  //bool ON_BrepFace_SetMesh( ON_BrepFace* pBrepFace, ON_Mesh* pMesh, int meshtype )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BrepFace_SetMesh(IntPtr pBrepFace, IntPtr pMesh, int meshtype);

  //const ON_Brep* ON_BrepSubItem_Brep( const ON_Geometry* pConstGeometry, int* index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepSubItem_Brep(IntPtr pConstGeometry, ref int index);

  //int ON_Brep_EdgeTrimCount( const ON_Brep* pConstBrep, int edge_index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_EdgeTrimCount(IntPtr pConstBrep, int edge_index);

  //int ON_Brep_EdgeFaceIndices( const ON_Brep* pConstBrep, int edge_index, ON_SimpleArray<int>* fi )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_EdgeFaceIndices(IntPtr pConstBrep, int edge_index, IntPtr fi);

  //int ON_Brep_FaceEdgeIndices( const ON_Brep* pConstBrep, int face_index, ON_SimpleArray<int>* ei )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_FaceEdgeIndices(IntPtr pConstBrep, int face_index, IntPtr ei);

  //int ON_Brep_FaceFaceIndices( const ON_Brep* pConstBrep, int face_index, ON_SimpleArray<int>* fi )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_FaceFaceIndices(IntPtr pConstBrep, int face_index, IntPtr fi);

  //int ON_Brep_AddTrimCurve( ON_Brep* pBrep, const ON_Curve* pConstCurve )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_AddTrimCurve(IntPtr pBrep, IntPtr pConstCurve);

  //int ON_Brep_AddEdgeCurve( ON_Brep* pBrep, const ON_Curve* pConstCurve )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_AddEdgeCurve(IntPtr pBrep, IntPtr pConstCurve);

  //int ON_Brep_AddSurface( ON_Brep* pBrep, const ON_Surface* pConstSurface )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_AddSurface(IntPtr pBrep, IntPtr pConstSurface);

  //bool ON_Brep_SetEdgeCurve( ON_Brep* pBrep, int edgecurveIndex, int c3Index, ON_INTERVAL_STRUCT subdomain )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_SetEdgeCurve(IntPtr pBrep, int edgecurveIndex, int c3Index, Interval subdomain);

  //bool ON_Brep_SetTrimCurve( ON_Brep* pBrep, int trimcurveIndex, int c3Index, ON_INTERVAL_STRUCT subdomain )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_SetTrimCurve(IntPtr pBrep, int trimcurveIndex, int c3Index, Interval subdomain);

  //int ON_Brep_NewVertex( ON_Brep* pBrep )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewVertex(IntPtr pBrep);

  //int ON_Brep_NewVertex2( ON_Brep* pBrep, ON_3DPOINT_STRUCT point, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewVertex2(IntPtr pBrep, Point3d point, double tolerance);

  //int ON_Brep_NewEdge( ON_Brep* pBrep, int curveIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewEdge(IntPtr pBrep, int curveIndex);

  //int ON_Brep_NewEdge2( ON_Brep* pBrep, int vertex1, int vertex2, int curveIndex, ON_INTERVAL_STRUCT subdomain, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewEdge2(IntPtr pBrep, int vertex1, int vertex2, int curveIndex, Interval subdomain, double tolerance);

  //int ON_Brep_NewFace(ON_Brep* pBrep, int si)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewFace(IntPtr pBrep, int si);

  //int ON_Brep_NewFace2(ON_Brep* pBrep, const ON_Surface* pConstSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewFace2(IntPtr pBrep, IntPtr pConstSurface);

  //int ON_Brep_NewRuledFace(ON_Brep* pBrep, int edgeA, bool revEdgeA, int edgeB, bool revEdgeB)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewRuledFace(IntPtr pBrep, int edgeA, [MarshalAs(UnmanagedType.U1)]bool revEdgeA, int edgeB, [MarshalAs(UnmanagedType.U1)]bool revEdgeB);

  //int ON_Brep_NewConeFace(ON_Brep* pBrep, int vertexIndex, int edgeIndex, bool revEdge)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewConeFace(IntPtr pBrep, int vertexIndex, int edgeIndex, [MarshalAs(UnmanagedType.U1)]bool revEdge);

  //int ON_Brep_NewLoop(ON_Brep* pBrep, int loopType, int face_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewLoop(IntPtr pBrep, int loopType, int face_index);

  //int ON_Brep_NewOuterLoop(ON_Brep* pBrep, int faceIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewOuterLoop(IntPtr pBrep, int faceIndex);

  //int ON_Brep_NewPlanarFaceLoop(ON_Brep* pBrep, int faceIndex, int loopType, ON_SimpleArray<ON_Curve*>* pCurveArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewPlanarFaceLoop(IntPtr pBrep, int faceIndex, int loopType, IntPtr pCurveArray);

  //ON_BrepVertex* ON_BrepVertex_GetPointer(ON_Brep* pBrep, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepVertex_GetPointer(IntPtr pBrep, int index);

  //int ON_Brep_NewTrim( ON_Brep* pBrep, int curveIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewTrim(IntPtr pBrep, int curveIndex);

  //int ON_Brep_NewTrim2( ON_Brep* pBrep, bool bRev3d, int loopIndex, int c2i )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewTrim2(IntPtr pBrep, [MarshalAs(UnmanagedType.U1)]bool bRev3d, int loopIndex, int c2i);

  //int ON_Brep_NewTrim3( ON_Brep* pBrep, bool bRev3d, int edgeIndex, int c2i )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewTrim3(IntPtr pBrep, [MarshalAs(UnmanagedType.U1)]bool bRev3d, int edgeIndex, int c2i);

  //int ON_Brep_NewTrim4( ON_Brep* pBrep, int edgeIndex, bool bRev3d, int loopIndex, int c2i )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewTrim4(IntPtr pBrep, int edgeIndex, [MarshalAs(UnmanagedType.U1)]bool bRev3d, int loopIndex, int c2i);

  //int ON_Brep_NewSingularTrim(ON_Brep* pBrep, int vertexIndex, int loopIndex, int iso, int c2i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewSingularTrim(IntPtr pBrep, int vertexIndex, int loopIndex, int iso, int c2i);

  //int ON_Brep_NewPointOnFace(ON_Brep* pBrep, int faceIndex, double s, double t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewPointOnFace(IntPtr pBrep, int faceIndex, double s, double t);

  //int ON_Brep_NewCurveOnFace(ON_Brep* pBrep, int faceIndex, int edgeIndex, bool bRev3d, int c2i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_NewCurveOnFace(IntPtr pBrep, int faceIndex, int edgeIndex, [MarshalAs(UnmanagedType.U1)]bool bRev3d, int c2i);

  //void ON_Brep_Append(ON_Brep* pBrep, const ON_Brep* pConstOtherBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_Append(IntPtr pBrep, IntPtr pConstOtherBrep);

  //void ON_Brep_SetVertices(ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_SetVertices(IntPtr pBrep);

  //void ON_Brep_SetTrimIsoFlags(ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_SetTrimIsoFlags(IntPtr pBrep);

  //ON_Brep* ONC_ON_BrepCone( const ON_Cone* cone, bool cap )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONC_ON_BrepCone(ref Cone cone, [MarshalAs(UnmanagedType.U1)]bool cap);

  //ON_Brep* ONC_ON_BrepRevSurface( const ON_RevSurface* pConstRevSurface, bool capStart, bool capEnd )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONC_ON_BrepRevSurface(IntPtr pConstRevSurface, [MarshalAs(UnmanagedType.U1)]bool capStart, [MarshalAs(UnmanagedType.U1)]bool capEnd);

  //void ON_Brep_DeleteFace( ON_Brep* pBrep, int faceIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_DeleteFace(IntPtr pBrep, int faceIndex);

  //bool ON_Brep_FlipReversedSurfaces(ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_FlipReversedSurfaces(IntPtr pBrep);

  //ON_Brep* ON_Brep_SubBrep(const ON_Brep* pConstBrep, int count, /*ARRAY*/int* face_indices)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_SubBrep(IntPtr pConstBrep, int count, [In,Out] int[] face_indices);

  //ON_Brep* ON_Brep_ExtractFace(ON_Brep* pBrep, int face_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_ExtractFace(IntPtr pBrep, int face_index);

  //bool ON_Brep_StandardizeFaceSurface(ON_Brep* pBrep, int face_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_StandardizeFaceSurface(IntPtr pBrep, int face_index);

  //void ON_Brep_StandardizeFaceSurfaces(ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_StandardizeFaceSurfaces(IntPtr pBrep);

  //void ON_Brep_Standardize(ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_Standardize(IntPtr pBrep);

  //bool ON_Brep_CullUnused(ON_Brep* pBrep, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_CullUnused(IntPtr pBrep, int which);

  //ON_Brep* ON_Brep_FromSphere( const ON_Sphere* pConstSphere )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_FromSphere(ref Sphere pConstSphere);
  #endregion


  #region on_circle.cpp
  //void ON_Circle_Create3Pt(ON_CIRCLE_STRUCT* c, ON_3DPOINT_STRUCT p, ON_3DPOINT_STRUCT q, ON_3DPOINT_STRUCT r)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Circle_Create3Pt(ref Circle c, Point3d p, Point3d q, Point3d r);

  //bool ON_Circle_CreatePtVecPt(ON_CIRCLE_STRUCT* c, ON_3DPOINT_STRUCT p, ON_3DVECTOR_STRUCT tan_at_p, ON_3DPOINT_STRUCT q)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_CreatePtVecPt(ref Circle c, Point3d p, Vector3d tan_at_p, Point3d q);

  //bool ON_Circle_IsInPlane(const ON_CIRCLE_STRUCT* c, const ON_PLANE_STRUCT* plane, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_IsInPlane(ref Circle c, ref Plane plane, double tolerance);

  //void ON_Circle_BoundingBox(const ON_CIRCLE_STRUCT* c, ON_BoundingBox* bbox)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Circle_BoundingBox(ref Circle c, ref BoundingBox bbox);

  //bool ON_Circle_Transform( ON_CIRCLE_STRUCT* c, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_Transform(ref Circle c, ref Transform xf);

  //bool ON_Circle_ClosestPointTo( const ON_CIRCLE_STRUCT* c,
  //                                             ON_3DPOINT_STRUCT testPoint,
  //                                             double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_ClosestPointTo(ref Circle c, Point3d testPoint, ref double t);

  //int ON_Circle_GetNurbForm(const ON_CIRCLE_STRUCT* pCircle, ON_NurbsCurve* nurbs_curve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Circle_GetNurbForm(ref Circle pCircle, IntPtr nurbs_curve);

  //bool ON_Circle_TryFitTTT(const ON_Curve* c1, const ON_Curve* c2, const ON_Curve* c3, 
  //                                       double seed1, double seed2, double seed3, 
  //                                       ON_CIRCLE_STRUCT* circleFit)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_TryFitTTT(IntPtr c1, IntPtr c2, IntPtr c3, double seed1, double seed2, double seed3, ref Circle circleFit);

  //bool ON_Circle_TryFitTT(const ON_Curve* c1, const ON_Curve* c2, 
  //                                      double seed1, double seed2,
  //                                      ON_CIRCLE_STRUCT* circleFit)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_TryFitTT(IntPtr c1, IntPtr c2, double seed1, double seed2, ref Circle circleFit);
  #endregion


  #region on_curve.cpp
  //bool ON_Curve_Domain( ON_Curve* pCurve, bool set, ON_Interval* ival )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_Domain(IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool set, ref Interval ival);

  //ON_Curve* ON_Curve_DuplicateCurve(ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Curve_DuplicateCurve(IntPtr pCurve);

  //bool ON_Curve_ChangeDimension(ON_Curve* pCurve, int desired_dimension)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_ChangeDimension(IntPtr pCurve, int desired_dimension);

  //bool ON_Curve_ChangeClosedCurveSeam(ON_Curve* pCurve, double t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_ChangeClosedCurveSeam(IntPtr pCurve, double t);

  //int ON_Curve_SpanCount(const ON_Curve* pConstCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_SpanCount(IntPtr pConstCurve);

  //bool ON_Curve_SpanInterval(const ON_Curve* pConstCurve, int spanIndex, ON_Interval* spanDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_SpanInterval(IntPtr pConstCurve, int spanIndex, ref Interval spanDomain);

  //int ON_Curve_Dimension(const ON_Curve* pConstCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_Dimension(IntPtr pConstCurve);

  //int ON_Curve_Degree(const ON_Curve* pConstCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_Degree(IntPtr pConstCurve);

  //int ON_Curve_HasNurbForm(const ON_Curve* pConstCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_HasNurbForm(IntPtr pConstCurve);

  //bool ON_Curve_IsLinear(const ON_Curve* pConstCurve, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsLinear(IntPtr pConstCurve, double tolerance);

  //int ON_Curve_IsPolyline1( const ON_Curve* pConstCurve, ON_3dPointArray* points )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_IsPolyline1(IntPtr pConstCurve, IntPtr points);

  //void ON_Curve_IsPolyline2( const ON_Curve* pCurve, ON_3dPointArray* points, int* pointCount, ON_SimpleArray<double>* t )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Curve_IsPolyline2(IntPtr pCurve, IntPtr points, ref int pointCount, IntPtr t);

  //bool ON_Curve_IsArc( const ON_Curve* pCurve, int ignore, ON_PLANE_STRUCT* plane, ON_Arc* arc, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsArc(IntPtr pCurve, int ignore, ref Plane plane, ref Arc arc, double tolerance);

  //bool ON_Curve_IsEllipse( const ON_Curve* pCurve, int ignore, ON_PLANE_STRUCT* plane, ON_Ellipse* ellipse, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsEllipse(IntPtr pCurve, int ignore, ref Plane plane, ref Ellipse ellipse, double tolerance);

  //bool ON_Curve_IsPlanar( const ON_Curve* pCurve, bool ignorePlane, ON_PLANE_STRUCT* plane, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsPlanar(IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool ignorePlane, ref Plane plane, double tolerance);

  //bool ON_Curve_IsInPlane(const ON_Curve* pCurve, const ON_PLANE_STRUCT* plane, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsInPlane(IntPtr pCurve, ref Plane plane, double tolerance);

  //bool ON_Curve_GetBool( const ON_Curve* pCurve, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetBool(IntPtr pCurve, int which);

  //bool ON_Curve_Reverse( ON_Curve* pCurve )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_Reverse(IntPtr pCurve);

  //bool ON_Curve_SetPoint( ON_Curve* pCurve, ON_3DPOINT_STRUCT pt, bool startpoint )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_SetPoint(IntPtr pCurve, Point3d pt, [MarshalAs(UnmanagedType.U1)]bool startpoint);

  //void ON_Curve_PointAt( const ON_Curve* pCurve, double t, ON_3dPoint* pt, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Curve_PointAt(IntPtr pCurve, double t, ref Point3d pt, int which);

  //void ON_Curve_GetVector( const ON_Curve* pCurve, int which, double t, ON_3dVector* vec )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Curve_GetVector(IntPtr pCurve, int which, double t, ref Vector3d vec);

  //bool ON_Curve_Evaluate( const ON_Curve* pCurve, int derivatives, int side, double t, ON_3dPointArray* outVectors )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_Evaluate(IntPtr pCurve, int derivatives, int side, double t, IntPtr outVectors);

  //bool ON_Curve_FrameAt( const ON_Curve* pConstCurve, double t, ON_PLANE_STRUCT* plane, bool zero_twisting)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_FrameAt(IntPtr pConstCurve, double t, ref Plane plane, [MarshalAs(UnmanagedType.U1)]bool zero_twisting);

  //ON_Curve* ON_Curve_TrimExtend( const ON_Curve* pCurve, double t0, double t1, bool trimming)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Curve_TrimExtend(IntPtr pCurve, double t0, double t1, [MarshalAs(UnmanagedType.U1)]bool trimming);

  //bool ON_Curve_Split( const ON_Curve* pCurve, double t, ON_Curve** left, ON_Curve** right )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_Split(IntPtr pCurve, double t, ref IntPtr left, ref IntPtr right);

  //ON_NurbsCurve* ON_Curve_NurbsCurve(const ON_Curve* pCurve, double tolerance, ON_INTERVAL_STRUCT sub_domain, bool ignoreSubDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Curve_NurbsCurve(IntPtr pCurve, double tolerance, Interval sub_domain, [MarshalAs(UnmanagedType.U1)]bool ignoreSubDomain);

  //bool ON_Curve_GetNurbParameter(const ON_Curve* pCurve, double t_in, double* t_out, bool nurbToCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetNurbParameter(IntPtr pCurve, double t_in, ref double t_out, [MarshalAs(UnmanagedType.U1)]bool nurbToCurve);

  //bool ON_Curve_IsClosable( const ON_Curve* curvePtr, double tolerance, double min_abs_size, double min_rel_size )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsClosable(IntPtr curvePtr, double tolerance, double min_abs_size, double min_rel_size);

  //int ON_Curve_ClosedCurveOrientation( const ON_Curve* curvePtr, ON_Xform* xform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_ClosedCurveOrientation(IntPtr curvePtr, ref Transform xform);

  //bool ON_Curve_GetNextDiscontinuity(const ON_Curve* curvePtr, int continuityType, double t0, double t1, double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetNextDiscontinuity(IntPtr curvePtr, int continuityType, double t0, double t1, ref double t);

  //bool ON_Curve_IsContinuous(const ON_Curve* curvePtr, int continuityType, double t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsContinuous(IntPtr curvePtr, int continuityType, double t);
  #endregion


  #region on_defines.cpp
  //void ON_Begin()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Begin();

  //double ONC_UnitScale(int from, int to)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ONC_UnitScale(int from, int to);

  //int ON_Version()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Version();

  //void ON_Revision(CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Revision(IntPtr pStringHolder);

  //ON_wString* ON_wString_New(const RHMONO_STRING* _text)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_wString_New([MarshalAs(UnmanagedType.LPWStr)]string _text);

  //void ON_wString_Delete(ON_wString* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_wString_Delete(IntPtr pString);

  //const RHMONO_STRING* ON_wString_Get(ON_wString* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_wString_Get(IntPtr pString);

  //void ON_wString_Set(ON_wString* pString, const RHMONO_STRING* _text)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_wString_Set(IntPtr pString, [MarshalAs(UnmanagedType.LPWStr)]string _text);

  //unsigned int ON_CRC32_Compute(unsigned int current_remainder, int count, /*ARRAY*/ const char* bytes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint ON_CRC32_Compute(uint current_remainder, int count, byte[] bytes);
  #endregion


  #region on_detail.cpp
  //bool ON_DetailView_GetBool(const ON_DetailView* pConstDetail, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_DetailView_GetBool(IntPtr pConstDetail, int which);

  //void ON_DetailView_SetBool(ON_DetailView* pDetail, int which, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DetailView_SetBool(IntPtr pDetail, int which, [MarshalAs(UnmanagedType.U1)]bool val);

  //double ON_DetailView_GetPageToModelRatio(const ON_DetailView* pConstDetail)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_DetailView_GetPageToModelRatio(IntPtr pConstDetail);

  //bool ON_DetailView_SetScale(ON_DetailView* pDetail, double model_length, int modelUnitSystem, double paper_length, int pageUnitSystem)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_DetailView_SetScale(IntPtr pDetail, double model_length, int modelUnitSystem, double paper_length, int pageUnitSystem);
  #endregion


  #region on_dimstyle.cpp
  //ON_DimStyle* ON_DimStyle_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_DimStyle_New();

  //bool ON_DimStyle_Name(const ON_DimStyle* pConstDimStyle, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_DimStyle_Name(IntPtr pConstDimStyle, IntPtr pStringHolder);

  //int ON_DimStyle_GetIndex(const ON_DimStyle* pConstDimStyle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_DimStyle_GetIndex(IntPtr pConstDimStyle);

  //double ON_DimStyle_GetDouble(const ON_DimStyle* pConstDimStyle, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_DimStyle_GetDouble(IntPtr pConstDimStyle, int which);

  //void ON_DimStyle_SetDouble(ON_DimStyle* pDimStyle, int which, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_SetDouble(IntPtr pDimStyle, int which, double val);

  //ON_UUID ON_DimStyle_ModelObjectId(const ON_DimStyle* pDimStyle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_DimStyle_ModelObjectId(IntPtr pDimStyle);

  //void ON_DimStyle_SetName(ON_DimStyle* pDimStyle, const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_SetName(IntPtr pDimStyle, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //int ON_DimStyle_GetInt(const ON_DimStyle* pConstDimStyle, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_DimStyle_GetInt(IntPtr pConstDimStyle, int which);

  //void ON_DimStyle_SetInt(ON_DimStyle* pDimStyle, int which, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_SetInt(IntPtr pDimStyle, int which, int val);

  //void ON_DimStyle_GetString(const ON_DimStyle* pConstDimStyle, CRhCmnStringHolder* pString, bool prefix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_GetString(IntPtr pConstDimStyle, IntPtr pString, [MarshalAs(UnmanagedType.U1)]bool prefix);

  //void ON_DimStyle_SetString(ON_DimStyle* pDimStyle, const RHMONO_STRING* str, bool prefix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_SetString(IntPtr pDimStyle, [MarshalAs(UnmanagedType.LPWStr)]string str, [MarshalAs(UnmanagedType.U1)]bool prefix);
  #endregion


  #region on_geometry.cpp
  //void ON_Geometry_BoundingBox( const ON_Geometry* ptr, ON_BoundingBox* bbox )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Geometry_BoundingBox(IntPtr ptr, ref BoundingBox bbox);

  //bool ON_Geometry_Rotate( ON_Geometry* ptr, double angle, ON_3DVECTOR_STRUCT axis, ON_3DPOINT_STRUCT center)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_Rotate(IntPtr ptr, double angle, Vector3d axis, Point3d center);

  //bool ON_Geometry_Translate( ON_Geometry* ptr, ON_3DVECTOR_STRUCT translation_vector)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_Translate(IntPtr ptr, Vector3d translation_vector);

  //bool ON_Geometry_Scale( ON_Geometry* ptr, double scale)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_Scale(IntPtr ptr, double scale);

  //bool ON_Geometry_GetTightBoundingBox(const ON_Geometry* ptr, ON_BoundingBox* bbox, ON_Xform* xform, bool useXform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_GetTightBoundingBox(IntPtr ptr, ref BoundingBox bbox, ref Transform xform, [MarshalAs(UnmanagedType.U1)]bool useXform);

  //bool ON_Geometry_Transform( ON_Geometry* ptr, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_Transform(IntPtr ptr, ref Transform xf);

  //bool ON_Geometry_GetBool(ON_Geometry* pGeometry, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_GetBool(IntPtr pGeometry, int which);

  //void ON_Geometry_ComponentIndex( const ON_Geometry* ptr, ON_COMPONENT_INDEX* ci )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Geometry_ComponentIndex(IntPtr ptr, ref ComponentIndex ci);

  //int ON_Geometry_GetGeometryType( const ON_Object* pOnObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Geometry_GetGeometryType(IntPtr pOnObject);

  //int ON_Geometry_GetCurveType( const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Geometry_GetCurveType(IntPtr pCurve);

  //ON_Brep* ON_Geometry_BrepForm(const ON_Geometry* pGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Geometry_BrepForm(IntPtr pGeometry);

  //ON_SimpleArray<ON_Geometry*>* ON_GeometryArray_New(int initial_capacity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_GeometryArray_New(int initial_capacity);

  //void ON_GeometryArray_Append(ON_SimpleArray<ON_Geometry*>* arrayPtr, ON_Geometry* geomPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_GeometryArray_Append(IntPtr arrayPtr, IntPtr geomPtr);

  //void ON_GeometryArray_Delete(ON_SimpleArray<ON_Geometry*>* arrayPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_GeometryArray_Delete(IntPtr arrayPtr);

  //int ON_GeometryArray_Count(ON_SimpleArray<ON_Geometry*>* arrayPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_GeometryArray_Count(IntPtr arrayPtr);

  //ON_Geometry* ON_GeometryArray_Get(ON_SimpleArray<ON_Geometry*>* arrayPtr, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_GeometryArray_Get(IntPtr arrayPtr, int index);
  #endregion


  #region on_hatch.cpp
  //ON_HatchPattern* ON_HatchPattern_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_HatchPattern_New();

  //int ON_HatchPattern_Index(const ON_HatchPattern* pConstHatchPattern)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_HatchPattern_Index(IntPtr pConstHatchPattern);

  //void ON_HatchPattern_GetString(const ON_HatchPattern* pConstHatchPattern, CRhCmnStringHolder* pString, bool name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_HatchPattern_GetString(IntPtr pConstHatchPattern, IntPtr pString, [MarshalAs(UnmanagedType.U1)]bool name);

  //void ON_HatchPattern_SetString(ON_HatchPattern* pHatchPattern, const RHMONO_STRING* str, bool name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_HatchPattern_SetString(IntPtr pHatchPattern, [MarshalAs(UnmanagedType.LPWStr)]string str, [MarshalAs(UnmanagedType.U1)]bool name);

  //int ON_HatchPattern_GetFillType(const ON_HatchPattern* pConstHatchPattern)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_HatchPattern_GetFillType(IntPtr pConstHatchPattern);

  //void ON_HatchPattern_SetFillType(ON_HatchPattern* pHatchPattern, int filltype)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_HatchPattern_SetFillType(IntPtr pHatchPattern, int filltype);

  //int ON_Hatch_PatternIndex(const ON_Hatch* pConstHatch)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Hatch_PatternIndex(IntPtr pConstHatch);

  //void ON_Hatch_SetPatternIndex(ON_Hatch* pHatch, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Hatch_SetPatternIndex(IntPtr pHatch, int val);

  //double ON_Hatch_GetRotation(const ON_Hatch* pConstHatch)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Hatch_GetRotation(IntPtr pConstHatch);

  //void ON_Hatch_SetRotation(ON_Hatch* pHatch, double rotation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Hatch_SetRotation(IntPtr pHatch, double rotation);

  //double ON_Hatch_GetScale(const ON_Hatch* pConstHatch)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Hatch_GetScale(IntPtr pConstHatch);

  //void ON_Hatch_SetScale(ON_Hatch* pHatch, double rotation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Hatch_SetScale(IntPtr pHatch, double rotation);

  //void ON_Hatch_LoopCurve3d(const ON_Hatch* pConstHatch, ON_SimpleArray<ON_Curve*>* pCurveArray, bool outer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Hatch_LoopCurve3d(IntPtr pConstHatch, IntPtr pCurveArray, [MarshalAs(UnmanagedType.U1)]bool outer);
  #endregion


  #region on_instance.cpp
  //ON_InstanceDefinition* ON_InstanceDefinition_New(const ON_InstanceDefinition* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_InstanceDefinition_New(IntPtr pOther);

  //void ON_InstanceDefinition_GetString(const ON_InstanceDefinition* pConstInstanceDefinition, int which, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_InstanceDefinition_GetString(IntPtr pConstInstanceDefinition, int which, IntPtr pStringHolder);

  //void ON_InstanceDefinition_SetString( ON_InstanceDefinition* pInstanceDefinition, int which, const RHMONO_STRING* _str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_InstanceDefinition_SetString(IntPtr pInstanceDefinition, int which, [MarshalAs(UnmanagedType.LPWStr)]string _str);

  //ON_UUID ON_InstanceDefinition_GetId( const ON_InstanceDefinition* pConstIdef )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_InstanceDefinition_GetId(IntPtr pConstIdef);

  //void ON_InstanceDefinition_SetId( ON_InstanceDefinition* pIdef, ON_UUID id )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_InstanceDefinition_SetId(IntPtr pIdef, Guid id);

  //void ON_InstanceDefinition_GetObjectIds( const ON_InstanceDefinition* pConstIdef, ON_SimpleArray<ON_UUID>* pIds )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_InstanceDefinition_GetObjectIds(IntPtr pConstIdef, IntPtr pIds);

  //ON_InstanceRef* ON_InstanceRef_New( ON_UUID instanceDefinitionId, ON_Xform* instanceXform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_InstanceRef_New(Guid instanceDefinitionId, ref Transform instanceXform);

  //ON_UUID ON_InstanceRef_IDefId( const ON_InstanceRef* pConstInstanceRef )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_InstanceRef_IDefId(IntPtr pConstInstanceRef);

  //void ON_InstanceRef_GetTransform( const ON_InstanceRef* pConstInstanceRef, ON_Xform* transform )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_InstanceRef_GetTransform(IntPtr pConstInstanceRef, ref Transform transform);
  #endregion


  #region on_intersect.cpp
  //bool ON_Intersect_LineLine(ON_Line* lineA, ON_Line* lineB, double* a, double* b)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_LineLine(ref Line lineA, ref Line lineB, ref double a, ref double b);

  //bool ON_Intersect_LinePlane(ON_Line* line, const ON_PLANE_STRUCT* plane, double* parameterOnLine)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_LinePlane(ref Line line, ref Plane plane, ref double parameterOnLine);

  //bool ON_Intersect_PlanePlane(const ON_PLANE_STRUCT* planeA, const ON_PLANE_STRUCT* planeB, ON_Line* line)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_PlanePlane(ref Plane planeA, ref Plane planeB, ref Line line);

  //bool ON_Intersect_PlanePlanePlane(const ON_PLANE_STRUCT* planeA, const ON_PLANE_STRUCT* planeB, const ON_PLANE_STRUCT* planeC, ON_3dPoint* intersectionPoint)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_PlanePlanePlane(ref Plane planeA, ref Plane planeB, ref Plane planeC, ref Point3d intersectionPoint);

  //int ON_Intersect_PlaneSphere(const ON_PLANE_STRUCT* plane, ON_Sphere* sphere, ON_CIRCLE_STRUCT* intersectionCircle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_PlaneSphere(ref Plane plane, ref Sphere sphere, ref Circle intersectionCircle);

  //int ON_Intersect_LineSphere(ON_Line* line, ON_Sphere* sphere, ON_3dPoint* point1, ON_3dPoint* point2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_LineSphere(ref Line line, ref Sphere sphere, ref Point3d point1, ref Point3d point2);

  //int ON_Intersect_LineCircle(const ON_Line* pLine, const ON_CIRCLE_STRUCT* pCircle, double* t1, ON_3dPoint* point1, double* t2, ON_3dPoint* point2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_LineCircle(ref Line pLine, ref Circle pCircle, ref double t1, ref Point3d point1, ref double t2, ref Point3d point2);

  //int ON_Intersect_LineCylinder(ON_Line* line, ON_Cylinder* cylinder, ON_3dPoint* point1, ON_3dPoint* point2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_LineCylinder(ref Line line, ref Cylinder cylinder, ref Point3d point1, ref Point3d point2);

  //bool ON_Intersect_BoundingBoxLine(ON_BoundingBox* box, ON_Line* line, double tolerance, ON_Interval* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_BoundingBoxLine(ref BoundingBox box, ref Line line, double tolerance, ref Interval t);

  //int ON_Intersect_SphereSphere(ON_Sphere* sphereA, ON_Sphere* sphereB, ON_CIRCLE_STRUCT* pCircle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_SphereSphere(ref Sphere sphereA, ref Sphere sphereB, ref Circle pCircle);

  //int ON_Intersect_MeshPlanes2(ON_SimpleArray<ON_Polyline*>* pPolylines, int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_MeshPlanes2(IntPtr pPolylines, int i);

  //void ON_Intersect_MeshPlanes3(ON_SimpleArray<ON_Polyline*>* pPolylines, int i, int point_count, /*ARRAY*/ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Intersect_MeshPlanes3(IntPtr pPolylines, int i, int point_count, [In,Out] Point3d[] points);

  //void ON_Intersect_MeshPlanes4(ON_SimpleArray<ON_Polyline*>* pPolylines)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Intersect_MeshPlanes4(IntPtr pPolylines);
  #endregion


  #region on_layer.cpp
  //ON_Layer* ON_Layer_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Layer_New();

  //void ON_Layer_Default(ON_Layer* pLayer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_Default(IntPtr pLayer);

  //void ON_Layer_GetLayerName(const ON_Layer* pLayer, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_GetLayerName(IntPtr pLayer, IntPtr pStringHolder);

  //void ON_Layer_SetLayerName(ON_Layer* pLayer, const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetLayerName(IntPtr pLayer, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //int ON_Layer_GetColor(const ON_Layer* pLayer, bool regularColor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Layer_GetColor(IntPtr pLayer, [MarshalAs(UnmanagedType.U1)]bool regularColor);

  //void ON_Layer_SetColor(ON_Layer* pLayer, int argb, bool regularColor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetColor(IntPtr pLayer, int argb, [MarshalAs(UnmanagedType.U1)]bool regularColor);

  //int ON_Layer_GetIndex(const ON_Layer* pLayer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Layer_GetIndex(IntPtr pLayer);

  //int ON_Layer_GetInt(const ON_Layer* pLayer, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Layer_GetInt(IntPtr pLayer, int which);

  //void ON_Layer_SetInt(ON_Layer* pLayer, int which, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetInt(IntPtr pLayer, int which, int val);

  //bool ON_Layer_GetSetBool(ON_Layer* pLayer, int which, bool set, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Layer_GetSetBool(IntPtr pLayer, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool val);

  //void ON_Layer_UnsetPersistentVisibility(ON_Layer* pLayer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_UnsetPersistentVisibility(IntPtr pLayer);

  //void ON_Layer_UnsetPersistentLocking(ON_Layer* pLayer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_UnsetPersistentLocking(IntPtr pLayer);

  //double ON_Layer_GetPlotWeight(const ON_Layer* pLayer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Layer_GetPlotWeight(IntPtr pLayer);

  //void ON_Layer_SetPlotWeight(ON_Layer* pLayer, double value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetPlotWeight(IntPtr pLayer, double value);

  //ON_UUID ON_Layer_GetGuid(const ON_Layer* pLayer, bool layerId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_Layer_GetGuid(IntPtr pLayer, [MarshalAs(UnmanagedType.U1)]bool layerId);

  //void ON_Layer_SetGuid(ON_Layer* pLayer, bool layerId, ON_UUID value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetGuid(IntPtr pLayer, [MarshalAs(UnmanagedType.U1)]bool layerId, Guid value);
  #endregion


  #region on_light.cpp
  //ON_Light* ON_Light_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Light_New();

  //bool ON_Light_IsEnabled(const ON_Light* pConstLight)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Light_IsEnabled(IntPtr pConstLight);

  //void ON_Light_SetEnabled(ON_Light* pLight, bool enabled)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetEnabled(IntPtr pLight, [MarshalAs(UnmanagedType.U1)]bool enabled);

  //int ON_Light_GetInt(const ON_Light* pConstLight, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Light_GetInt(IntPtr pConstLight, int which);

  //void ON_Light_SetInt(ON_Light* pLight, int which, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetInt(IntPtr pLight, int which, int val);

  //void ON_Light_GetVector(const ON_Light* pConstLight, ON_3dVector* vec, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_GetVector(IntPtr pConstLight, ref Vector3d vec, int which);

  //void ON_Light_SetVector(ON_Light* pLight, ON_3DVECTOR_STRUCT v, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetVector(IntPtr pLight, Vector3d v, int which);

  //void ON_Light_GetLocation(const ON_Light* pConstLight, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_GetLocation(IntPtr pConstLight, ref Point3d pt);

  //void ON_Light_SetLocation(ON_Light* pLight, ON_3DPOINT_STRUCT loc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetLocation(IntPtr pLight, Point3d loc);

  //double ON_Light_GetDouble(const ON_Light* pConstLight, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Light_GetDouble(IntPtr pConstLight, int which);

  //void ON_Light_SetDouble(ON_Light* pLight, int which, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetDouble(IntPtr pLight, int which, double val);

  //int ON_Light_GetColor(const ON_Light* pConstLight, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Light_GetColor(IntPtr pConstLight, int which);

  //void ON_Light_SetColor(ON_Light* pLight, int which, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetColor(IntPtr pLight, int which, int argb);

  //void ON_Light_SetAttenuation(ON_Light* pLight, double a0, double a1, double a2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetAttenuation(IntPtr pLight, double a0, double a1, double a2);

  //void ON_Light_GetAttenuationVector(const ON_Light* pConstLight, ON_3dVector* v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_GetAttenuationVector(IntPtr pConstLight, ref Vector3d v);

  //double ON_Light_GetAttenuation(const ON_Light* pConstLight, double d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Light_GetAttenuation(IntPtr pConstLight, double d);

  //bool ON_Light_GetSpotLightRadii(const ON_Light* pConstLight, double* inner, double* outer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Light_GetSpotLightRadii(IntPtr pConstLight, ref double inner, ref double outer);

  //void ON_Light_GetName(const ON_Light* pConstLight, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_GetName(IntPtr pConstLight, IntPtr pString);

  //void ON_Light_SetName(ON_Light* pLight, const RHMONO_STRING* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetName(IntPtr pLight, [MarshalAs(UnmanagedType.LPWStr)]string pString);
  #endregion


  #region on_line.cpp
  //double ON_Line_DistanceToPoint( const ON_Line* pLine, ON_3DPOINT_STRUCT point, bool minDist)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Line_DistanceToPoint(ref Line pLine, Point3d point, [MarshalAs(UnmanagedType.U1)]bool minDist);

  //double ON_Line_DistanceToLine( const ON_Line* pLine, const ON_Line* pOtherLine, bool minDist)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Line_DistanceToLine(ref Line pLine, ref Line pOtherLine, [MarshalAs(UnmanagedType.U1)]bool minDist);

  //bool ON_Line_Transform( ON_Line* pLine, const ON_Xform* xform )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Line_Transform(ref Line pLine, ref Transform xform);

  //bool ON_Line_InPlane( const ON_Line* pConstLine, ON_PLANE_STRUCT* plane )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Line_InPlane(ref Line pConstLine, ref Plane plane);
  #endregion


  #region on_linecurve.cpp
  //ON_LineCurve* ON_LineCurve_New( ON_LineCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineCurve_New(IntPtr pOther);

  //ON_LineCurve* ON_LineCurve_New2(ON_2DPOINT_STRUCT from, ON_2DPOINT_STRUCT to)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineCurve_New2(Point2d from, Point2d to);

  //ON_LineCurve* ON_LineCurve_New3(ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineCurve_New3(Point3d from, Point3d to);

  //ON_LineCurve* ON_LineCurve_New4(ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to, double t0, double t1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineCurve_New4(Point3d from, Point3d to, double t0, double t1);

  //void ON_LineCurve_GetSetLine(ON_LineCurve* pCurve, bool set, ON_Line* line)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LineCurve_GetSetLine(IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool set, ref Line line);
  #endregion


  #region on_linetype.cpp
  //ON_Linetype* ON_Linetype_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Linetype_New();

  //void ON_Linetype_Default(ON_Linetype* pLinetype)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Linetype_Default(IntPtr pLinetype);

  //void ON_Linetype_GetLinetypeName(const ON_Linetype* pLinetype, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Linetype_GetLinetypeName(IntPtr pLinetype, IntPtr pStringHolder);

  //void ON_Linetype_SetLinetypeName(ON_Linetype* pLinetype, const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Linetype_SetLinetypeName(IntPtr pLinetype, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //int ON_Linetype_GetInt(const ON_Linetype* pLinetype, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Linetype_GetInt(IntPtr pLinetype, int which);

  //void ON_Linetype_SetInt(ON_Linetype* pLinetype, int which, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Linetype_SetInt(IntPtr pLinetype, int which, int val);

  //double ON_Linetype_PatternLength(const ON_Linetype* pLinetype)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Linetype_PatternLength(IntPtr pLinetype);

  //ON_UUID ON_Linetype_GetGuid(const ON_Linetype* pLinetype)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_Linetype_GetGuid(IntPtr pLinetype);

  //void ON_Linetype_SetGuid(ON_Linetype* pLinetype, ON_UUID value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Linetype_SetGuid(IntPtr pLinetype, Guid value);

  //int ON_Linetype_AppendSegment(ON_Linetype* pLinetype, double length, bool isSolid)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Linetype_AppendSegment(IntPtr pLinetype, double length, [MarshalAs(UnmanagedType.U1)]bool isSolid);

  //bool ON_Linetype_RemoveSegment(ON_Linetype* pLinetype, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Linetype_RemoveSegment(IntPtr pLinetype, int index);

  //bool ON_Linetype_SetSegment(ON_Linetype* pLinetype, int index, double length, bool isSolid)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Linetype_SetSegment(IntPtr pLinetype, int index, double length, [MarshalAs(UnmanagedType.U1)]bool isSolid);

  //void ON_Linetype_GetSegment(const ON_Linetype* pConstLinetype, int index, double* length, bool* isSolid)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Linetype_GetSegment(IntPtr pConstLinetype, int index, ref double length, [MarshalAs(UnmanagedType.U1)]ref bool isSolid);
  #endregion


  #region on_material.cpp
  //ON_Material* ON_Material_New(const ON_Material* pConstOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Material_New(IntPtr pConstOther);

  //void ON_Material_Default(ON_Material* pMaterial)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_Default(IntPtr pMaterial);

  //int ON_Material_Index(const ON_Material* pConstMaterial)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_Index(IntPtr pConstMaterial);

  //int ON_Material_FindBitmapTexture(const ON_Material* pConstMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_FindBitmapTexture(IntPtr pConstMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //void ON_Material_SetBitmapTexture(ON_Material* pMaterial, int index, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_SetBitmapTexture(IntPtr pMaterial, int index, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //int ON_Material_AddBitmapTexture(ON_Material* pMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_AddBitmapTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //int ON_Material_AddBumpTexture(ON_Material* pMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_AddBumpTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //int ON_Material_AddEnvironmentTexture(ON_Material* pMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_AddEnvironmentTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //int ON_Material_AddTransparencyTexture(ON_Material* pMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_AddTransparencyTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //bool ON_Material_ModifyTexture(ON_Material* pMaterial, ON_UUID texture_id, const ON_Texture* pConstTexture)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Material_ModifyTexture(IntPtr pMaterial, Guid texture_id, IntPtr pConstTexture);

  //double ON_Material_GetDouble(const ON_Material* pConstMaterial, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Material_GetDouble(IntPtr pConstMaterial, int which);

  //void ON_Material_SetDouble(ON_Material* pMaterial, int which, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_SetDouble(IntPtr pMaterial, int which, double val);

  //bool ON_Material_AddTexture(ON_Material* pMaterial, const RHMONO_STRING* filename, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Material_AddTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename, int which);

  //bool ON_Material_SetTexture(ON_Material* pMaterial, const ON_Texture* pConstTexture, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Material_SetTexture(IntPtr pMaterial, IntPtr pConstTexture, int which);

  //int ON_Material_GetTexture(const ON_Material* pConstMaterial, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_GetTexture(IntPtr pConstMaterial, int which);

  //int ON_Material_GetTextureCount(const ON_Material* pConstMaterial)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_GetTextureCount(IntPtr pConstMaterial);

  //int ON_Material_GetColor( const ON_Material* pConstMaterial, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_GetColor(IntPtr pConstMaterial, int which);

  //void ON_Material_SetColor( ON_Material* pMaterial, int which, int argb )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_SetColor(IntPtr pMaterial, int which, int argb);

  //void ON_Material_GetName(const ON_Material* pConstMaterial, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_GetName(IntPtr pConstMaterial, IntPtr pString);

  //void ON_Material_SetName(ON_Material* pMaterial, const RHMONO_STRING* name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_SetName(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string name);

  //ON_Texture* ON_Texture_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Texture_New();

  //const ON_Texture* ON_Material_GetTexturePointer(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Material_GetTexturePointer(IntPtr pConstMaterial, int index);

  //int ON_Material_NextBitmapTexture(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_NextBitmapTexture(IntPtr pConstMaterial, int index);

  //int ON_Material_NextBumpTexture(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_NextBumpTexture(IntPtr pConstMaterial, int index);

  //int ON_Material_NextEnvironmentTexture(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_NextEnvironmentTexture(IntPtr pConstMaterial, int index);

  //int ON_Material_NextTransparencyTexture(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_NextTransparencyTexture(IntPtr pConstMaterial, int index);

  //void ON_Texture_GetFileName(const ON_Texture* pConstTexture, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_GetFileName(IntPtr pConstTexture, IntPtr pString);

  //void ON_Texture_SetFileName(ON_Texture* pTexture, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_SetFileName(IntPtr pTexture, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //ON_UUID ON_Texture_GetId(const ON_Texture* pConstTexture)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_Texture_GetId(IntPtr pConstTexture);

  //bool ON_Texture_GetEnabled(const ON_Texture* pConstTexture)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Texture_GetEnabled(IntPtr pConstTexture);

  //void ON_Texture_SetEnabled(ON_Texture* pTexture, bool enabled)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_SetEnabled(IntPtr pTexture, [MarshalAs(UnmanagedType.U1)]bool enabled);

  //int ON_Texture_TextureType(const ON_Texture* pConstTexture)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Texture_TextureType(IntPtr pConstTexture);

  //void ON_Texture_SetTextureType(ON_Texture* pTexture, int texture_type)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_SetTextureType(IntPtr pTexture, int texture_type);

  //int ON_Texture_Mode(const ON_Texture* pConstTexture)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Texture_Mode(IntPtr pConstTexture);

  //void ON_Texture_SetMode(ON_Texture* pTexture, int value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_SetMode(IntPtr pTexture, int value);

  //int ON_Texture_wrapuvw(const ON_Texture* pConstTexture, int uvw)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Texture_wrapuvw(IntPtr pConstTexture, int uvw);

  //void ON_Texture_Set_wrapuvw(ON_Texture* pTexture, int uvw, int value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_Set_wrapuvw(IntPtr pTexture, int uvw, int value);

  //bool ON_Texture_Apply_uvw(const ON_Texture* pConstTexture)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Texture_Apply_uvw(IntPtr pConstTexture);

  //void ON_Texture_SetApply_uvw(ON_Texture* pTexture, bool value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_SetApply_uvw(IntPtr pTexture, [MarshalAs(UnmanagedType.U1)]bool value);

  //void ON_Texture_uvw(const ON_Texture* pConstTexture, ON_Xform* instanceXform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_uvw(IntPtr pConstTexture, ref Transform instanceXform);

  //void ON_Texture_Setuvw(ON_Texture* pTexture, ON_Xform* instanceXform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_Setuvw(IntPtr pTexture, ref Transform instanceXform);

  //void ON_Texture_GetAlphaBlendValues(const ON_Texture* pConstTexture, double* c, double* a0, double* a1, double* a2, double* a3)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_GetAlphaBlendValues(IntPtr pConstTexture, ref double c, ref double a0, ref double a1, ref double a2, ref double a3);

  //void ON_Texture_SetAlphaBlendValues(ON_Texture* pTexture, double c, double a0, double a1, double a2, double a3)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_SetAlphaBlendValues(IntPtr pTexture, double c, double a0, double a1, double a2, double a3);

  //ON_UUID ON_Material_ModelObjectId(const ON_Material* pConstMaterial)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_Material_ModelObjectId(IntPtr pConstMaterial);

  //ON_UUID ON_Material_PlugInId(const ON_Material* pConstMaterial)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_Material_PlugInId(IntPtr pConstMaterial);

  //void ON_Material_SetPlugInId(ON_Material* pMaterial, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_SetPlugInId(IntPtr pMaterial, Guid id);
  #endregion


  #region on_mesh.cpp
  //ON_Mesh* ON_Mesh_New(const ON_Mesh* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Mesh_New(IntPtr pOther);

  //void ON_Mesh_CopyFrom(const ON_Mesh* srcConstMesh, ON_Mesh* destMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_CopyFrom(IntPtr srcConstMesh, IntPtr destMesh);

  //bool ON_Mesh_HasSurfaceParameters(const ON_Mesh* pConstMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_HasSurfaceParameters(IntPtr pConstMesh);

  //bool ON_Mesh_EvaluateMeshGeometry(ON_Mesh* pMesh, const ON_Surface* pConstSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_EvaluateMeshGeometry(IntPtr pMesh, IntPtr pConstSurface);

  //bool ON_Mesh_SetVertex(ON_Mesh* pMesh, int vertexIndex, float x, float y, float z)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetVertex(IntPtr pMesh, int vertexIndex, float x, float y, float z);

  //bool ON_Mesh_SetFace(ON_Mesh* pMesh, int faceIndex, int vertex1, int vertex2, int vertex3, int vertex4)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetFace(IntPtr pMesh, int faceIndex, int vertex1, int vertex2, int vertex3, int vertex4);

  //bool ON_Mesh_SetTextureCoordinate(ON_Mesh* pMesh, int index, float s, float t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetTextureCoordinate(IntPtr pMesh, int index, float s, float t);

  //int ON_Mesh_AddFace(ON_Mesh* pMesh, int vertex1, int vertex2, int vertex3, int vertex4)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_AddFace(IntPtr pMesh, int vertex1, int vertex2, int vertex3, int vertex4);

  //bool ON_Mesh_InsertFace(ON_Mesh* pMesh, int index, int vertex1, int vertex2, int vertex3, int vertex4)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_InsertFace(IntPtr pMesh, int index, int vertex1, int vertex2, int vertex3, int vertex4);

  //bool ON_Mesh_SetNormal(ON_Mesh* pMesh, int index, ON_3FVECTOR_STRUCT vector, bool faceNormal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetNormal(IntPtr pMesh, int index, Vector3f vector, [MarshalAs(UnmanagedType.U1)]bool faceNormal);

  //bool ON_Mesh_SetColor(ON_Mesh* pMesh, int index, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetColor(IntPtr pMesh, int index, int argb);

  //bool ON_Mesh_SetNormals(ON_Mesh* ptr, int count, /*ARRAY*/const ON_3fVector* normals, bool append)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetNormals(IntPtr ptr, int count, Vector3f[] normals, [MarshalAs(UnmanagedType.U1)]bool append);

  //bool ON_Mesh_SetTextureCoordinates(ON_Mesh* pMesh, int count, /*ARRAY*/const ON_2fPoint* tcs, bool append)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetTextureCoordinates(IntPtr pMesh, int count, ref Point2f tcs, [MarshalAs(UnmanagedType.U1)]bool append);

  //bool ON_Mesh_SetTextureCoordinates2(ON_Mesh* pMesh, const ON_TextureMapping* pConstTextureMapping)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetTextureCoordinates2(IntPtr pMesh, IntPtr pConstTextureMapping);

  //void ON_Mesh_GetMappingTag(const ON_Mesh* pConstMesh, int which_tag, ON_UUID* id, int* mapping_type, unsigned int* crc, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_GetMappingTag(IntPtr pConstMesh, int which_tag, ref Guid id, ref int mapping_type, ref uint crc, ref Transform xf);

  //void ON_Mesh_SetMappingTag(ON_Mesh* pMesh, int which_tag, ON_UUID id, int mapping_type, unsigned int crc, const ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_SetMappingTag(IntPtr pMesh, int which_tag, Guid id, int mapping_type, uint crc, ref Transform xf);

  //bool ON_Mesh_SetVertexColors(ON_Mesh* pMesh, int count, /*ARRAY*/const int* argb, bool append)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetVertexColors(IntPtr pMesh, int count, int[] argb, [MarshalAs(UnmanagedType.U1)]bool append);

  //void ON_Mesh_SetInt( ON_Mesh* pMesh, int which, int value )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_SetInt(IntPtr pMesh, int which, int value);

  //int ON_Mesh_GetInt( const ON_Mesh* pConstMesh, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetInt(IntPtr pConstMesh, int which);

  //bool ON_Mesh_GetBool( const ON_Mesh* pMesh, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetBool(IntPtr pMesh, int which);

  //void ON_Mesh_Flip(ON_Mesh* ptr, bool vertNorm, bool faceNorm, bool faceOrientation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_Flip(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool vertNorm, [MarshalAs(UnmanagedType.U1)]bool faceNorm, [MarshalAs(UnmanagedType.U1)]bool faceOrientation);

  //bool ON_Mesh_NonConstBoolOp(ON_Mesh* ptr, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_NonConstBoolOp(IntPtr ptr, int which);

  //bool ON_Mesh_ConvertTrianglesToQuads(ON_Mesh* ptr, double angle_tol, double min_diag_ratio)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_ConvertTrianglesToQuads(IntPtr ptr, double angle_tol, double min_diag_ratio);

  //int ON_Mesh_CullOp(ON_Mesh* ptr, bool faces)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_CullOp(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool faces);

  //bool ON_Mesh_Reverse(ON_Mesh* ptr, bool texturecoords, int direction)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_Reverse(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool texturecoords, int direction);

  //bool ON_Mesh_CombineIdenticalVertices(ON_Mesh* ptr, bool ignore_normals, bool ignore_tcs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_CombineIdenticalVertices(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool ignore_normals, [MarshalAs(UnmanagedType.U1)]bool ignore_tcs);

  //void ON_Mesh_Append(ON_Mesh* ptr, const ON_Mesh* other)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_Append(IntPtr ptr, IntPtr other);

  //bool ON_Mesh_IsManifold(const ON_Mesh* ptr, bool topotest, bool* isOriented, bool* hasBoundary)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_IsManifold(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool topotest, [MarshalAs(UnmanagedType.U1)]ref bool isOriented, [MarshalAs(UnmanagedType.U1)]ref bool hasBoundary);

  //int ON_Mesh_DeleteFace(ON_Mesh* pMesh, int count, /*ARRAY*/const int* indices)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_DeleteFace(IntPtr pMesh, int count, int[] indices);

  //bool ON_Mesh_Vertex(const ON_Mesh* ptr, int index, ON_3fPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_Vertex(IntPtr ptr, int index, ref Point3f pt);

  //bool ON_Mesh_GetNormal(const ON_Mesh* pConstMesh, int index, ON_3fVector* vector, bool faceNormal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetNormal(IntPtr pConstMesh, int index, ref Vector3f vector, [MarshalAs(UnmanagedType.U1)]bool faceNormal);

  //bool ON_Mesh_GetColor(const ON_Mesh* pConstMesh, int index, int* argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetColor(IntPtr pConstMesh, int index, ref int argb);

  //bool ON_Mesh_GetFace(const ON_Mesh* pConstMesh, int face_index, ON_MeshFace* face)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetFace(IntPtr pConstMesh, int face_index, ref MeshFace face);

  //bool ON_Mesh_GetFaceVertices(const ON_Mesh* pConstMesh,
  //                                           int face_index,
  //                                           ON_3fPoint* p0,
  //                                           ON_3fPoint* p1,
  //                                           ON_3fPoint* p2,
  //                                           ON_3fPoint* p3)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetFaceVertices(IntPtr pConstMesh, int face_index, ref Point3f p0, ref Point3f p1, ref Point3f p2, ref Point3f p3);

  //bool ON_Mesh_GetTextureCoordinate(const ON_Mesh* pConstMesh, int index, float* s, float* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetTextureCoordinate(IntPtr pConstMesh, int index, ref float s, ref float t);

  //bool ON_Mesh_NakedEdgePoints( const ON_Mesh* pMesh, /*ARRAY*/int* naked_status, int count )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_NakedEdgePoints(IntPtr pMesh, [In,Out] int[] naked_status, int count);

  //bool ON_Mesh_IsPointInside(const ON_Mesh* pConstMesh, ON_3DPOINT_STRUCT point, double tolerance, bool strictlyin)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_IsPointInside(IntPtr pConstMesh, Point3d point, double tolerance, [MarshalAs(UnmanagedType.U1)]bool strictlyin);

  //bool ON_Mesh_IndexOpBool(ON_Mesh* pMesh, int which, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_IndexOpBool(IntPtr pMesh, int which, int index);

  //bool ON_Mesh_FaceIsHidden(const ON_Mesh* pConstMesh, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_FaceIsHidden(IntPtr pConstMesh, int index);

  //bool ON_Mesh_FaceHasNakedEdges(const ON_Mesh* pConstMesh, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_FaceHasNakedEdges(IntPtr pConstMesh, int index);

  //bool ON_Mesh_FaceTopologicalVertices(const ON_Mesh* pConstMesh, int index, /*ARRAY*/int* verts)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_FaceTopologicalVertices(IntPtr pConstMesh, int index, [In,Out] int[] verts);

  //void ON_Mesh_ClearList( ON_Mesh* pMesh, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_ClearList(IntPtr pMesh, int which);

  //bool ON_Mesh_GetHiddenValue(const ON_Mesh* pConstMesh, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetHiddenValue(IntPtr pConstMesh, int index);

  //void ON_Mesh_HiddenVertexOp( ON_Mesh* pMesh, int index, int op)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_HiddenVertexOp(IntPtr pMesh, int index, int op);

  //void ON_Mesh_RepairHiddenArray( ON_Mesh* pMesh )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_RepairHiddenArray(IntPtr pMesh);

  //int ON_Mesh_GetVertexFaces( const ON_Mesh* pMesh, ON_SimpleArray<int>* face_indices, int vertex_index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetVertexFaces(IntPtr pMesh, IntPtr face_indices, int vertex_index);

  //int ON_Mesh_GetTopologicalVertices( const ON_Mesh* pMesh, ON_SimpleArray<int>* vertex_indices, int vertex_index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetTopologicalVertices(IntPtr pMesh, IntPtr vertex_indices, int vertex_index);

  //int ON_Mesh_GetConnectedVertices( const ON_Mesh* pMesh, ON_SimpleArray<int>* vertex_indices, int vertex_index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetConnectedVertices(IntPtr pMesh, IntPtr vertex_indices, int vertex_index);

  //bool ON_MeshTopologyEdge_TopVi(const ON_Mesh* pConstMesh, int edgeindex, int* v0, int* v1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MeshTopologyEdge_TopVi(IntPtr pConstMesh, int edgeindex, ref int v0, ref int v1);

  //int ON_MeshTopologyEdge_TopfCount(const ON_Mesh* pConstMesh, int edgeindex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_MeshTopologyEdge_TopfCount(IntPtr pConstMesh, int edgeindex);

  //void ON_MeshTopologyEdge_TopfList2(const ON_Mesh* pConstMesh, int edgeindex, int count, /*ARRAY*/int* faces, /*ARRAY*/bool* directionsMatch)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshTopologyEdge_TopfList2(IntPtr pConstMesh, int edgeindex, int count, [In,Out] int[] faces, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.U1), In, Out] bool[] directionsMatch);

  //void ON_MeshTopologyEdge_TopfList(const ON_Mesh* pConstMesh, int edgeindex, int count, /*ARRAY*/int* faces)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshTopologyEdge_TopfList(IntPtr pConstMesh, int edgeindex, int count, [In,Out] int[] faces);

  //void ON_MeshTopology_TopEdgeLine(const ON_Mesh* pConstMesh, int edge_index, ON_Line* line)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshTopology_TopEdgeLine(IntPtr pConstMesh, int edge_index, ref Line line);

  //int ON_MeshTopology_TopEdge(const ON_Mesh* pConstMesh, int vert1, int vert2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_MeshTopology_TopEdge(IntPtr pConstMesh, int vert1, int vert2);

  //bool ON_MeshTopology_GetTopFaceVertices(const ON_Mesh* pConstMesh, int index, int* a, int* b, int* c, int* d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MeshTopology_GetTopFaceVertices(IntPtr pConstMesh, int index, ref int a, ref int b, ref int c, ref int d);

  //bool ON_MeshTopology_TopItemIsHidden(const ON_Mesh* pConstMesh, int which, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MeshTopology_TopItemIsHidden(IntPtr pConstMesh, int which, int index);

  //ON_MeshParameters* ON_MeshParameters_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_MeshParameters_New();

  //void ON_MeshParameters_Delete(ON_MeshParameters* pMeshParameters)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshParameters_Delete(IntPtr pMeshParameters);

  //bool ON_MeshParameters_GetBool(const ON_MeshParameters* pConstMeshParameters, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MeshParameters_GetBool(IntPtr pConstMeshParameters, int which);

  //void ON_MeshParameters_SetBool(ON_MeshParameters* pMeshParameters, int which, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshParameters_SetBool(IntPtr pMeshParameters, int which, [MarshalAs(UnmanagedType.U1)]bool val);

  //double ON_MeshParameters_GetDouble(const ON_MeshParameters* pConstMeshParameters, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_MeshParameters_GetDouble(IntPtr pConstMeshParameters, int which);

  //void ON_MeshParameters_SetDouble(ON_MeshParameters* pMeshParameters, int which, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshParameters_SetDouble(IntPtr pMeshParameters, int which, double val);

  //int ON_MeshParameters_GetGridCount(const ON_MeshParameters* pConstMeshParameters, bool mincount)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_MeshParameters_GetGridCount(IntPtr pConstMeshParameters, [MarshalAs(UnmanagedType.U1)]bool mincount);

  //void ON_MeshParameters_SetGridCount(ON_MeshParameters* pMeshParameters, bool mincount, int count)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshParameters_SetGridCount(IntPtr pMeshParameters, [MarshalAs(UnmanagedType.U1)]bool mincount, int count);

  //bool ON_MeshParameters_Copy(const ON_MeshParameters* pConstMP, /*ARRAY*/bool* bvals, /*ARRAY*/int* ivals, /*ARRAY*/double* dvals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MeshParameters_Copy(IntPtr pConstMP, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.U1), In, Out] bool[] bvals, [In,Out] int[] ivals, [In,Out] double[] dvals);

  //void ON_Mesh_TopologyVertex(const ON_Mesh* pConstMesh, int index, ON_3fPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_TopologyVertex(IntPtr pConstMesh, int index, ref Point3f point);

  //void ON_Mesh_SetTopologyVertex(ON_Mesh* pMesh, int index, ON_3FPOINT_STRUCT point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_SetTopologyVertex(IntPtr pMesh, int index, Point3f point);

  //bool ON_Mesh_GetFaceCenter(const ON_Mesh* pConstMesh, int faceIndex, ON_3dPoint* center)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetFaceCenter(IntPtr pConstMesh, int faceIndex, ref Point3d center);

  //int ON_Mesh_TopologyVertexIndex(const ON_Mesh* pConstMesh, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_TopologyVertexIndex(IntPtr pConstMesh, int index);

  //void ON_Mesh_DestroyTextureData(ON_Mesh* pMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_DestroyTextureData(IntPtr pMesh);

  //int ON_MeshTopologyVertex_Count(const ON_Mesh* pConstMesh, int topologyVertexIndex, bool vertices)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_MeshTopologyVertex_Count(IntPtr pConstMesh, int topologyVertexIndex, [MarshalAs(UnmanagedType.U1)]bool vertices);

  //void ON_MeshTopologyVertex_GetIndices(const ON_Mesh* pConstMesh, int topologyVertexIndex, int count, /*ARRAY*/int* rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshTopologyVertex_GetIndices(IntPtr pConstMesh, int topologyVertexIndex, int count, [In,Out] int[] rc);

  //void ON_MeshTopologyVertex_ConnectedVertices(const ON_Mesh* pConstMesh, int topologyVertexIndex, int count, /*ARRAY*/int* rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshTopologyVertex_ConnectedVertices(IntPtr pConstMesh, int topologyVertexIndex, int count, [In,Out] int[] rc);

  //bool ON_MeshTopologyVertex_SortEdges(const ON_Mesh* pConstMesh, int topologyVertexIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MeshTopologyVertex_SortEdges(IntPtr pConstMesh, int topologyVertexIndex);

  //void ON_MeshTopologyVertex_ConnectedFaces(const ON_Mesh* pConstMesh, int topologyVertexIndex, ON_SimpleArray<int>* face_indices)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshTopologyVertex_ConnectedFaces(IntPtr pConstMesh, int topologyVertexIndex, IntPtr face_indices);

  //bool ON_MeshTopologyFace_Edges(const ON_Mesh* pConstMesh, int faceIndex, int* a, int* b, int* c, int* d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MeshTopologyFace_Edges(IntPtr pConstMesh, int faceIndex, ref int a, ref int b, ref int c, ref int d);

  //bool ON_MeshTopologyFace_Edges2(const ON_Mesh* pConstMesh, int faceIndex, int* a, int* b, int* c, int* d, /*ARRAY*/int* orientationSame)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MeshTopologyFace_Edges2(IntPtr pConstMesh, int faceIndex, ref int a, ref int b, ref int c, ref int d, [In,Out] int[] orientationSame);

  //ON_TextureMapping* ON_TextureMapping_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_TextureMapping_New();

  //bool ON_TextureMapping_SetPlaneMapping(ON_TextureMapping* pTextureMapping, const ON_PLANE_STRUCT* plane, ON_INTERVAL_STRUCT dx, ON_INTERVAL_STRUCT dy, ON_INTERVAL_STRUCT dz)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_TextureMapping_SetPlaneMapping(IntPtr pTextureMapping, ref Plane plane, Interval dx, Interval dy, Interval dz);

  //bool ON_TextureMapping_SetCylinderMapping(ON_TextureMapping* pTextureMapping, ON_Cylinder* pCylinder, bool capped)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_TextureMapping_SetCylinderMapping(IntPtr pTextureMapping, ref Cylinder pCylinder, [MarshalAs(UnmanagedType.U1)]bool capped);

  //bool ON_TextureMapping_SetSphereMapping(ON_TextureMapping* pTextureMapping, ON_Sphere* pSphere)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_TextureMapping_SetSphereMapping(IntPtr pTextureMapping, ref Sphere pSphere);

  //bool ON_TextureMapping_SetBoxMapping(ON_TextureMapping* pTextureMapping, const ON_PLANE_STRUCT* plane, ON_INTERVAL_STRUCT dx, ON_INTERVAL_STRUCT dy, ON_INTERVAL_STRUCT dz, bool capped)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_TextureMapping_SetBoxMapping(IntPtr pTextureMapping, ref Plane plane, Interval dx, Interval dy, Interval dz, [MarshalAs(UnmanagedType.U1)]bool capped);

  //ON_Mesh* ON_Mesh_BrepToMeshSimple(const ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Mesh_BrepToMeshSimple(IntPtr pBrep);

  //bool ON_Mesh_CreatePartition(ON_Mesh* pMesh, int max_vertices, int max_triangle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_CreatePartition(IntPtr pMesh, int max_vertices, int max_triangle);

  //int ON_Mesh_PartitionCount(const ON_Mesh* pConstMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_PartitionCount(IntPtr pConstMesh);

  //bool ON_Mesh_GetMeshPart(const ON_Mesh* pConstMesh, int which, int* vi0, int* vi1, int* fi0, int* fi1, int* vertex_count, int* triangle_count )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetMeshPart(IntPtr pConstMesh, int which, ref int vi0, ref int vi1, ref int fi0, ref int fi1, ref int vertex_count, ref int triangle_count);
  #endregion


  #region on_nurbscurve.cpp
  //ON_NurbsCurve* ON_NurbsCurve_New( ON_NurbsCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsCurve_New(IntPtr pOther);

  //bool ON_NurbsCurve_IsDuplicate(ON_NurbsCurve* crv1, ON_NurbsCurve* crv2, bool ignore, double tol )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_IsDuplicate(IntPtr crv1, IntPtr crv2, [MarshalAs(UnmanagedType.U1)]bool ignore, double tol);

  //bool ON_NurbsCurve_Create(ON_NurbsCurve* crv, int dim, bool rat, int order, int cv_count)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_Create(IntPtr crv, int dim, [MarshalAs(UnmanagedType.U1)]bool rat, int order, int cv_count);

  //bool ON_NurbsCurve_CreateClampedUniformNurbs(ON_NurbsCurve* crv, int dim, int order, int count, /*ARRAY*/const ON_3dPoint* pts, double knot_delta)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_CreateClampedUniformNurbs(IntPtr crv, int dim, int order, int count, Point3d[] pts, double knot_delta);

  //bool ON_NurbsCurve_CreatePeriodicUniformNurbs(ON_NurbsCurve* crv, int dim, int order, int count, /*ARRAY*/const ON_3dPoint* pts, double knot_delta)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_CreatePeriodicUniformNurbs(IntPtr crv, int dim, int order, int count, Point3d[] pts, double knot_delta);

  //ON_NurbsCurve* ON_NurbsCurve_CreateControlPointCurve(int count, /*ARRAY*/const ON_3dPoint* points, int degree)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsCurve_CreateControlPointCurve(int count, Point3d[] points, int degree);

  //bool ON_NurbsCurve_GetBool(ON_NurbsCurve* pCurve, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_GetBool(IntPtr pCurve, int which);

  //int ON_NurbsCurve_GetInt( const ON_NurbsCurve* pCurve, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_NurbsCurve_GetInt(IntPtr pCurve, int which);

  //double ON_NurbsCurve_SuperfluousKnot(const ON_NurbsCurve* pConstNurbsCurve, int end)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsCurve_SuperfluousKnot(IntPtr pConstNurbsCurve, int end);

  //bool ON_NurbsCurve_SetCV2(ON_NurbsCurve* pCurve, int cvIndex, ON_4dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_SetCV2(IntPtr pCurve, int cvIndex, ref Point4d point);

  //bool ON_NurbsCurve_GetCV2(const ON_NurbsCurve* pCurve, int cvIndex, ON_4dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_GetCV2(IntPtr pCurve, int cvIndex, ref Point4d point);

  //bool ON_NurbsCurve_SetKnot(ON_NurbsCurve* pCurve, int knotIndex, double knotValue)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_SetKnot(IntPtr pCurve, int knotIndex, double knotValue);

  //double ON_NurbsCurve_Knot(const ON_NurbsCurve* crv, int knotIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsCurve_Knot(IntPtr crv, int knotIndex);

  //int ON_NurbsCurve_KnotMultiplicity(const ON_NurbsCurve* crv, int knotIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_NurbsCurve_KnotMultiplicity(IntPtr crv, int knotIndex);

  //bool ON_NurbsCurve_MakeUniformKnotVector(ON_NurbsCurve* pCurve, double delta, bool clamped)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_MakeUniformKnotVector(IntPtr pCurve, double delta, [MarshalAs(UnmanagedType.U1)]bool clamped);

  //double ON_NurbsCurve_GrevilleAbcissa(const ON_NurbsCurve* pCurve, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsCurve_GrevilleAbcissa(IntPtr pCurve, int index);

  //bool ON_NurbsCurve_GetGrevilleAbcissae(const ON_NurbsCurve* pCurve, /*ARRAY*/double* ga)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_GetGrevilleAbcissae(IntPtr pCurve, [In,Out] double[] ga);

  //bool ON_NurbsCurve_InsertKnot(ON_NurbsCurve* pCurve, double knotValue, int knotMultiplicity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_InsertKnot(IntPtr pCurve, double knotValue, int knotMultiplicity);

  //bool ON_NurbsCurve_IncreaseDegree(ON_NurbsCurve* pCurve, int desiredDegree)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_IncreaseDegree(IntPtr pCurve, int desiredDegree);

  //double ON_NurbsCurve_ControlPolygonLength(const ON_NurbsCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsCurve_ControlPolygonLength(IntPtr pCurve);

  //bool ON_NurbsCurve_MakePiecewiseBezier(ON_NurbsCurve* pCurve, bool setEndWeightsToOne)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_MakePiecewiseBezier(IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool setEndWeightsToOne);

  //bool ON_NurbsCurve_ChangeEndWeights(ON_NurbsCurve* pCurve, double w0, double w1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_ChangeEndWeights(IntPtr pCurve, double w0, double w1);

  //bool ON_NurbsCurve_Reparameterize(ON_NurbsCurve* pCurve, double c)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_Reparameterize(IntPtr pCurve, double c);

  //int ON_Ellipse_GetNurbForm(ON_Ellipse* ellipse, ON_NurbsCurve* pNurbsCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Ellipse_GetNurbForm(ref Ellipse ellipse, IntPtr pNurbsCurve);

  //int ON_Ellipse_GetNurbForm2( const ON_PLANE_STRUCT* plane, double r0, double r1, ON_NurbsCurve* pNurbsCurve )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Ellipse_GetNurbForm2(ref Plane plane, double r0, double r1, IntPtr pNurbsCurve);
  #endregion


  #region on_nurbssurface.cpp
  //ON_NurbsSurface* ON_NurbsSurface_New(int dimension, bool isRational, int order0, int order1, int cvCount0, int cvCount1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsSurface_New(int dimension, [MarshalAs(UnmanagedType.U1)]bool isRational, int order0, int order1, int cvCount0, int cvCount1);

  //ON_NurbsSurface* ON_NurbsSurface_New2(const ON_NurbsSurface* pConstNurbsSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsSurface_New2(IntPtr pConstNurbsSurface);

  //void ON_NurbsSurface_CopyFrom(const ON_NurbsSurface* pConstSourceNurbsSurface, ON_NurbsSurface* pDestNurbsSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_NurbsSurface_CopyFrom(IntPtr pConstSourceNurbsSurface, IntPtr pDestNurbsSurface);

  //bool ON_NurbsSurface_GetBoolDir(ON_NurbsSurface* pSurface, int which, int dir)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_GetBoolDir(IntPtr pSurface, int which, int dir);

  //double ON_NurbsSurface_SuperfluousKnot(const ON_NurbsSurface* pConstNurbsSurface, int dir, int end)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsSurface_SuperfluousKnot(IntPtr pConstNurbsSurface, int dir, int end);

  //bool ON_NurbsSurface_GetBool(ON_NurbsSurface* pSurface, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_GetBool(IntPtr pSurface, int which);

  //int ON_NurbsSurface_GetIntDir( const ON_NurbsSurface* pSurface, int which, int dir )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_NurbsSurface_GetIntDir(IntPtr pSurface, int which, int dir);

  //bool ON_NurbsSurface_GetGrevillePoint(const ON_NurbsSurface* pConstNurbsSurface, int u, int v, ON_2dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_GetGrevillePoint(IntPtr pConstNurbsSurface, int u, int v, ref Point2d point);

  //bool ON_NurbsSurface_GetCV(const ON_NurbsSurface* pConstNurbsSurface, int u, int v, ON_4dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_GetCV(IntPtr pConstNurbsSurface, int u, int v, ref Point4d point);

  //bool ON_NurbsSurface_SetCV(ON_NurbsSurface* pNurbsSurface, int u, int v, ON_4dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_SetCV(IntPtr pNurbsSurface, int u, int v, ref Point4d point);

  //bool ON_NurbsSurface_SetKnot(ON_NurbsSurface* pSurface, int dir, int knotIndex, double knotValue)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_SetKnot(IntPtr pSurface, int dir, int knotIndex, double knotValue);

  //double ON_NurbsSurface_Knot(const ON_NurbsSurface* pSurface, int dir, int knotIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsSurface_Knot(IntPtr pSurface, int dir, int knotIndex);

  //int ON_NurbsSurface_KnotMultiplicity(const ON_NurbsSurface* pSurface, int dir, int knotIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_NurbsSurface_KnotMultiplicity(IntPtr pSurface, int dir, int knotIndex);

  //bool ON_NurbsSurface_MakeUniformKnotVector(ON_NurbsSurface* pSurface, int dir, double delta, bool clamped)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_MakeUniformKnotVector(IntPtr pSurface, int dir, double delta, [MarshalAs(UnmanagedType.U1)]bool clamped);

  //bool ON_NurbsSurface_InsertKnot(ON_NurbsSurface* pSurface, int dir, double knotValue, int knotMultiplicity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_InsertKnot(IntPtr pSurface, int dir, double knotValue, int knotMultiplicity);

  //ON_NurbsSurface* ON_NurbsSurface_CreateRuledSurface( const ON_Curve* pConstA, const ON_Curve* pConstB )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsSurface_CreateRuledSurface(IntPtr pConstA, IntPtr pConstB);

  //ON_MorphControl* ON_MorphControl_New( const ON_MorphControl* pConstOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_MorphControl_New(IntPtr pConstOther);

  //void ON_MorphControl_SetCurves( ON_MorphControl* pMorphControl, const ON_NurbsCurve* pConstNurbsCurve0, const ON_NurbsCurve* pConstNurbsCurve1 )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MorphControl_SetCurves(IntPtr pMorphControl, IntPtr pConstNurbsCurve0, IntPtr pConstNurbsCurve1);

  //double ON_MorphControl_GetSporhTolerance(const ON_MorphControl* pConstMorphControl)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_MorphControl_GetSporhTolerance(IntPtr pConstMorphControl);

  //void ON_MorphControl_SetSporhTolerance(ON_MorphControl* pMorphControl, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MorphControl_SetSporhTolerance(IntPtr pMorphControl, double tolerance);

  //bool ON_MorphControl_GetBool(const ON_MorphControl* pConstMorphControl, bool quickpreview)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MorphControl_GetBool(IntPtr pConstMorphControl, [MarshalAs(UnmanagedType.U1)]bool quickpreview);

  //void ON_MorphControl_SetBool(ON_MorphControl* pMorphControl, bool val, bool quickpreview)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MorphControl_SetBool(IntPtr pMorphControl, [MarshalAs(UnmanagedType.U1)]bool val, [MarshalAs(UnmanagedType.U1)]bool quickpreview);
  #endregion


  #region on_object.cpp
  //void RhCmn_SetInShutDown()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RhCmn_SetInShutDown();

  //void ON_Object_Dump( const ON_Object* pConstObject, CRhCmnStringHolder* pStringHolder )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Object_Dump(IntPtr pConstObject, IntPtr pStringHolder);

  //void ON_Object_Delete( ON_Object* pObject )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Object_Delete(IntPtr pObject);

  //ON_Object* ON_Object_Duplicate( ON_Object* pObject )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Object_Duplicate(IntPtr pObject);

  //unsigned int ON_Object_ObjectType( ON_Object* pObject )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint ON_Object_ObjectType(IntPtr pObject);

  //bool ON_Object_IsValid(const ON_Object* pConstObject, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Object_IsValid(IntPtr pConstObject, IntPtr pStringHolder);

  //unsigned int ON_Object_SizeOf(const ON_Object* pObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint ON_Object_SizeOf(IntPtr pObject);

  //bool ON_Object_SetUserString(const ON_Object* pObject, const RHMONO_STRING* _key, const RHMONO_STRING* _value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Object_SetUserString(IntPtr pObject, [MarshalAs(UnmanagedType.LPWStr)]string _key, [MarshalAs(UnmanagedType.LPWStr)]string _value);

  //void ON_Object_GetUserString(const ON_Object* pObject, const RHMONO_STRING* _key, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Object_GetUserString(IntPtr pObject, [MarshalAs(UnmanagedType.LPWStr)]string _key, IntPtr pStringHolder);

  //int ON_Object_UserStringCount(const ON_Object* pObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Object_UserStringCount(IntPtr pObject);

  //ON_ClassArray<ON_UserString>* ON_Object_GetUserStrings(const ON_Object* pObject, int* count)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Object_GetUserStrings(IntPtr pObject, ref int count);

  //ON_UserData* ON_Object_FirstUserData(const ON_Object* pObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Object_FirstUserData(IntPtr pObject);

  //void ON_Object_CopyUserData(const ON_Object* pConstSourceObject, ON_Object* pDestinationObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Object_CopyUserData(IntPtr pConstSourceObject, IntPtr pDestinationObject);

  //int ON_Object_UserDataCount(const ON_Object* pObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Object_UserDataCount(IntPtr pObject);

  //bool ON_Object_AttachUserData(ON_Object* pOnObject, ON_UserData* pUserData, bool detachIfNeeded)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Object_AttachUserData(IntPtr pOnObject, IntPtr pUserData, [MarshalAs(UnmanagedType.U1)]bool detachIfNeeded);

  //bool ON_Object_DetachUserData(ON_Object* pOnObject, ON_UserData* pUserData)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Object_DetachUserData(IntPtr pOnObject, IntPtr pUserData);

  //void ON_UserStringList_KeyValue(const ON_ClassArray<ON_UserString>* pList, int i, bool key, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UserStringList_KeyValue(IntPtr pList, int i, [MarshalAs(UnmanagedType.U1)]bool key, IntPtr pStringHolder);

  //void ON_UserStringList_Delete(ON_ClassArray<ON_UserString>* pList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UserStringList_Delete(IntPtr pList);
  #endregion


  #region on_plane.cpp
  //bool ON_Plane_CreateFromNormal(ON_PLANE_STRUCT* p, ON_3DPOINT_STRUCT origin, ON_3DVECTOR_STRUCT normal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_CreateFromNormal(ref Plane p, Point3d origin, Vector3d normal);

  //bool ON_Plane_CreateFromFrame(ON_PLANE_STRUCT* p, ON_3DPOINT_STRUCT origin, ON_3DVECTOR_STRUCT x, ON_3DVECTOR_STRUCT y)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_CreateFromFrame(ref Plane p, Point3d origin, Vector3d x, Vector3d y);

  //bool ON_Plane_CreateFromPoints(ON_PLANE_STRUCT* p, ON_3DPOINT_STRUCT origin, ON_3DPOINT_STRUCT x, ON_3DPOINT_STRUCT y)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_CreateFromPoints(ref Plane p, Point3d origin, Point3d x, Point3d y);

  //bool ON_Plane_CreateFromEquation(ON_PLANE_STRUCT* p, double a, double b, double c, double d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_CreateFromEquation(ref Plane p, double a, double b, double c, double d);

  //bool ON_Plane_IsValid(const ON_PLANE_STRUCT* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_IsValid(ref Plane p);

  //bool ON_Plane_Transform( ON_PLANE_STRUCT* p, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_Transform(ref Plane p, ref Transform xf);

  //double ON_Plane_DistanceTo( ON_PLANE_STRUCT* p, ON_3DPOINT_STRUCT pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Plane_DistanceTo(ref Plane p, Point3d pt);

  //void ON_Plane_GetEquation( ON_PLANE_STRUCT* plane, /*ARRAY*/double* eq )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Plane_GetEquation(ref Plane plane, [In,Out] double[] eq);
  #endregion


  #region on_planesurface.cpp
  //ON_PlaneSurface* ON_PlaneSurface_New(const ON_PLANE_STRUCT* plane, ON_INTERVAL_STRUCT xExtents, ON_INTERVAL_STRUCT yExtents)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PlaneSurface_New(ref Plane plane, Interval xExtents, Interval yExtents);

  //void ON_ClippingPlaneSurface_GetPlane(const ON_ClippingPlaneSurface* pConstClippingPlaneSurface, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ClippingPlaneSurface_GetPlane(IntPtr pConstClippingPlaneSurface, ref Plane plane);

  //void ON_ClippingPlaneSurface_SetPlane(ON_ClippingPlaneSurface* pClippingPlaneSurface, const ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ClippingPlaneSurface_SetPlane(IntPtr pClippingPlaneSurface, ref Plane plane);

  //int ON_ClippingPlaneSurface_ViewportIdCount(const ON_ClippingPlaneSurface* pConstClippingPlaneSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_ClippingPlaneSurface_ViewportIdCount(IntPtr pConstClippingPlaneSurface);

  //ON_UUID ON_ClippingPlaneSurface_ViewportId(const ON_ClippingPlaneSurface* pConstClippingPlaneSurface, int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_ClippingPlaneSurface_ViewportId(IntPtr pConstClippingPlaneSurface, int i);
  #endregion


  #region on_point.cpp
  //void ON_Interval_Intersection( ON_Interval* ptr, ON_INTERVAL_STRUCT a, ON_INTERVAL_STRUCT b )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Interval_Intersection(ref Interval ptr, Interval a, Interval b);

  //void ON_Interval_Union( ON_Interval* ptr, ON_INTERVAL_STRUCT a, ON_INTERVAL_STRUCT b )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Interval_Union(ref Interval ptr, Interval a, Interval b);

  //double ON_2dVector_Length(ON_2DVECTOR_STRUCT v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_2dVector_Length(Vector2d v);

  //bool ON_2dVector_Unitize( ON_2dVector* v )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_2dVector_Unitize(ref Vector2d v);

  //bool ON_3fVector_Unitize( ON_3fVector* v )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3fVector_Unitize(ref Vector3f v);

  //void ON_3fVector_Rotate( ON_3fVector* v, double angle, ON_3FVECTOR_STRUCT axis )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3fVector_Rotate(ref Vector3f v, double angle, Vector3f axis);

  //bool ON_3fVector_PerpendicularTo( ON_3fVector* v, ON_3FVECTOR_STRUCT other )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3fVector_PerpendicularTo(ref Vector3f v, Vector3f other);

  //bool ON_3dVector_Unitize( ON_3dVector* v )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dVector_Unitize(ref Vector3d v);

  //int ON_3dVector_IsParallelTo( ON_3DVECTOR_STRUCT v0, ON_3DVECTOR_STRUCT v1, double angleTol)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dVector_IsParallelTo(Vector3d v0, Vector3d v1, double angleTol);

  //bool ON_3dVector_IsTiny( ON_3DVECTOR_STRUCT v, double tinyTolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dVector_IsTiny(Vector3d v, double tinyTolerance);

  //void ON_3dVector_Rotate( ON_3dVector* v, double angle, ON_3DVECTOR_STRUCT axis )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dVector_Rotate(ref Vector3d v, double angle, Vector3d axis);

  //bool ON_3dVector_PerpendicularTo( ON_3dVector* v, ON_3DVECTOR_STRUCT other )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dVector_PerpendicularTo(ref Vector3d v, Vector3d other);

  //int ONC_ComparePoint(int dim, bool is_rat, ON_3DPOINT_STRUCT a, ON_3DPOINT_STRUCT b)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ONC_ComparePoint(int dim, [MarshalAs(UnmanagedType.U1)]bool is_rat, Point3d a, Point3d b);

  //bool ON_Line_ClosestPointTo( ON_3DPOINT_STRUCT testPoint, ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to, double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Line_ClosestPointTo(Point3d testPoint, Point3d from, Point3d to, ref double t);

  //bool ON_4dPoint_Equality( ON_4DPOINT_STRUCT a, ON_4DPOINT_STRUCT b )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_4dPoint_Equality(Point4d a, Point4d b);

  //bool ON_4dPoint_Normalize( ON_4dPoint* a )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_4dPoint_Normalize(ref Point4d a);
  #endregion


  #region on_pointcloud.cpp
  //ON_PointCloud* ON_PointCloud_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PointCloud_New();

  //ON_PointCloud* ON_PointCloud_New1(int count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PointCloud_New1(int count, Point3d[] points);

  //void ON_PointCloud_FixPointCloud( ON_PointCloud* pPointCloud, bool ensureNormals, bool ensureColors, bool ensureHidden )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_FixPointCloud(IntPtr pPointCloud, [MarshalAs(UnmanagedType.U1)]bool ensureNormals, [MarshalAs(UnmanagedType.U1)]bool ensureColors, [MarshalAs(UnmanagedType.U1)]bool ensureHidden);

  //void ON_PointCloud_MergeCloud( ON_PointCloud* pPointCloud, const ON_PointCloud* pConstOtherPointCloud )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_MergeCloud(IntPtr pPointCloud, IntPtr pConstOtherPointCloud);

  //int ON_PointCloud_GetInt(const ON_PointCloud* pConstPointCloud, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PointCloud_GetInt(IntPtr pConstPointCloud, int which);

  //bool ON_PointCloud_GetBool(const ON_PointCloud* pConstPointCloud, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetBool(IntPtr pConstPointCloud, int which);

  //void ON_PointCloud_DestroyArray( ON_PointCloud* pPointCloud, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_DestroyArray(IntPtr pPointCloud, int which);

  //bool ON_PointCloud_GetPoint(const ON_PointCloud* pConstPointCloud, int index, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetPoint(IntPtr pConstPointCloud, int index, ref Point3d pt);

  //bool ON_PointCloud_SetPoint( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_SetPoint(IntPtr pPointCloud, int index, Point3d point);

  //bool ON_PointCloud_GetNormal(const ON_PointCloud* pConstPointCloud, int index, ON_3dVector* nr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetNormal(IntPtr pConstPointCloud, int index, ref Vector3d nr);

  //bool ON_PointCloud_SetNormal( ON_PointCloud* pPointCloud, int index, ON_3DVECTOR_STRUCT normal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_SetNormal(IntPtr pPointCloud, int index, Vector3d normal);

  //bool ON_PointCloud_GetColor(const ON_PointCloud* pConstPointCloud, int index, int* argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetColor(IntPtr pConstPointCloud, int index, ref int argb);

  //bool ON_PointCloud_SetColor( ON_PointCloud* pPointCloud, int index, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_SetColor(IntPtr pPointCloud, int index, int argb);

  //bool ON_PointCloud_GetHiddenFlag(const ON_PointCloud* pConstPointCloud, int index, bool* hidden)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetHiddenFlag(IntPtr pConstPointCloud, int index, [MarshalAs(UnmanagedType.U1)]ref bool hidden);

  //bool ON_PointCloud_SetHiddenFlag( ON_PointCloud* pPointCloud, int index, bool hidden)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_SetHiddenFlag(IntPtr pPointCloud, int index, [MarshalAs(UnmanagedType.U1)]bool hidden);

  //bool ON_PointCloud_RemovePoint( ON_PointCloud* pPointCloud, int index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_RemovePoint(IntPtr pPointCloud, int index);

  //bool ON_PointCloud_AppendPoint1( ON_PointCloud* pPointCloud, ON_3DPOINT_STRUCT point )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_AppendPoint1(IntPtr pPointCloud, Point3d point);

  //bool ON_PointCloud_AppendPoint2( ON_PointCloud* pPointCloud, ON_3DPOINT_STRUCT point, int argb )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_AppendPoint2(IntPtr pPointCloud, Point3d point, int argb);

  //bool ON_PointCloud_AppendPoint3( ON_PointCloud* pPointCloud, ON_3DPOINT_STRUCT point, ON_3DVECTOR_STRUCT normal )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_AppendPoint3(IntPtr pPointCloud, Point3d point, Vector3d normal);

  //bool ON_PointCloud_AppendPoint4( ON_PointCloud* pPointCloud, ON_3DPOINT_STRUCT point, int argb, ON_3DVECTOR_STRUCT normal )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_AppendPoint4(IntPtr pPointCloud, Point3d point, int argb, Vector3d normal);

  //bool ON_PointCloud_InsertPoint1( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_InsertPoint1(IntPtr pPointCloud, int index, Point3d point);

  //bool ON_PointCloud_InsertPoint2( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point, int argb )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_InsertPoint2(IntPtr pPointCloud, int index, Point3d point, int argb);

  //bool ON_PointCloud_InsertPoint3( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point, ON_3DVECTOR_STRUCT normal )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_InsertPoint3(IntPtr pPointCloud, int index, Point3d point, Vector3d normal);

  //bool ON_PointCloud_InsertPoint4( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point, int argb, ON_3DVECTOR_STRUCT normal )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_InsertPoint4(IntPtr pPointCloud, int index, Point3d point, int argb, Vector3d normal);

  //void ON_PointCloud_AppendPoints( ON_PointCloud* pPointCloud, int count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_AppendPoints(IntPtr pPointCloud, int count, Point3d[] points);

  //void ON_PointCloud_InsertPoints( ON_PointCloud* pPointCloud, int index, int count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_InsertPoints(IntPtr pPointCloud, int index, int count, Point3d[] points);

  //void ON_PointCloud_GetPoints(const ON_PointCloud* pConstPointCloud, int count, /*ARRAY*/ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_GetPoints(IntPtr pConstPointCloud, int count, [In,Out] Point3d[] points);

  //void ON_PointCloud_GetNormals(const ON_PointCloud* pConstPointCloud, int count, /*ARRAY*/ON_3dVector* normals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_GetNormals(IntPtr pConstPointCloud, int count, [In,Out] Vector3d[] normals);

  //void ON_PointCloud_GetColors(const ON_PointCloud* pConstPointCloud, int count, /*ARRAY*/int* colors)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_GetColors(IntPtr pConstPointCloud, int count, [In,Out] int[] colors);
  #endregion


  #region on_pointgeometry.cpp
  //ON_Point* ON_Point_New(ON_3DPOINT_STRUCT loc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Point_New(Point3d loc);

  //void ON_Point_GetSetPoint(ON_Point* ptr, bool set, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Point_GetSetPoint(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, ref Point3d pt);
  #endregion


  #region on_pointgrid.cpp
  //ON_PointGrid* ON_PointGrid_New(int rows, int columns)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PointGrid_New(int rows, int columns);
  #endregion


  #region on_polycurve.cpp
  //ON_PolyCurve* ON_PolyCurve_New( ON_PolyCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PolyCurve_New(IntPtr pOther);

  //int ON_PolyCurve_Count( const ON_PolyCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolyCurve_Count(IntPtr pCurve);

  //ON_Curve* ON_PolyCurve_SegmentCurve( const ON_PolyCurve* pCurve, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PolyCurve_SegmentCurve(IntPtr pCurve, int index);

  //double ON_PolyCurve_SegmentCurveParameter( const ON_PolyCurve* pCurve, double polycurveParameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_PolyCurve_SegmentCurveParameter(IntPtr pCurve, double polycurveParameter);

  //double ON_PolyCurve_PolyCurveParameter( const ON_PolyCurve* pCurve, int segmentIndex, double segmentCurveParameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_PolyCurve_PolyCurveParameter(IntPtr pCurve, int segmentIndex, double segmentCurveParameter);

  //void ON_PolyCurve_SegmentDomain( const ON_PolyCurve* pCurve, int segmentIndex, ON_Interval* domain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PolyCurve_SegmentDomain(IntPtr pCurve, int segmentIndex, ref Interval domain);

  //int ON_PolyCurve_SegmentIndex( const ON_PolyCurve* pCurve, double polycurveParameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolyCurve_SegmentIndex(IntPtr pCurve, double polycurveParameter);

  //int ON_PolyCurve_SegmentIndexes( const ON_PolyCurve* pCurve, ON_INTERVAL_STRUCT subDomain, int* index0, int* index1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolyCurve_SegmentIndexes(IntPtr pCurve, Interval subDomain, ref int index0, ref int index1);

  //int ON_PolyCurve_HasGap( const ON_PolyCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolyCurve_HasGap(IntPtr pCurve);

  //bool ON_PolyCurve_GetBool( ON_PolyCurve* pCurve, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PolyCurve_GetBool(IntPtr pCurve, int which);

  //void ON_PolyCurve_SegmentCurves( const ON_PolyCurve* pCurve, ON_SimpleArray<ON_Curve*>* pCurveArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PolyCurve_SegmentCurves(IntPtr pCurve, IntPtr pCurveArray);

  //bool ON_PolyCurve_AppendAndMatch( ON_PolyCurve* pCurve, ON_Arc* arc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PolyCurve_AppendAndMatch(IntPtr pCurve, ref Arc arc);

  //bool ON_PolyCurve_AppendAndMatch2( ON_PolyCurve* pPolyCurve, const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PolyCurve_AppendAndMatch2(IntPtr pPolyCurve, IntPtr pCurve);
  #endregion


  #region on_polylinecurve.cpp
  //ON_PolylineCurve* ON_PolylineCurve_New( ON_PolylineCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PolylineCurve_New(IntPtr pOther);

  //ON_PolylineCurve* ON_PolylineCurve_New2(int point_count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PolylineCurve_New2(int point_count, Point3d[] points);

  //int ON_PolylineCurve_PointCount(const ON_PolylineCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolylineCurve_PointCount(IntPtr pCurve);

  //void ON_PolylineCurve_GetSetPoint(ON_PolylineCurve* pCurve, int index, ON_3dPoint* point, bool set)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PolylineCurve_GetSetPoint(IntPtr pCurve, int index, ref Point3d point, [MarshalAs(UnmanagedType.U1)]bool set);

  //int ON_SimpleArray_PolylineCurve_GetCount(ON_SimpleArray<ON_PolylineCurve*>* pPolylineCurves, int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_SimpleArray_PolylineCurve_GetCount(IntPtr pPolylineCurves, int i);

  //void ON_SimpleArray_PolylineCurve_GetPoints(ON_SimpleArray<ON_PolylineCurve*>* pPolylineCurves, int i, int point_count, /*ARRAY*/ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_SimpleArray_PolylineCurve_GetPoints(IntPtr pPolylineCurves, int i, int point_count, [In,Out] Point3d[] points);

  //void ON_SimpleArray_PolylineCurve_Delete(ON_SimpleArray<ON_PolylineCurve*>* pPolylineCurves, bool delete_individual_curves)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_SimpleArray_PolylineCurve_Delete(IntPtr pPolylineCurves, [MarshalAs(UnmanagedType.U1)]bool delete_individual_curves);
  #endregion


  #region on_rtree.cpp
  //ON_RTree* ON_RTree_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_RTree_New();

  //void ON_RTree_Delete(ON_RTree* pTree)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_RTree_Delete(IntPtr pTree);

  //bool ON_RTree_CreateMeshFaceTree(ON_RTree* pTree, const ON_Mesh* pConstMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RTree_CreateMeshFaceTree(IntPtr pTree, IntPtr pConstMesh);

  //bool ON_RTree_CreatePointCloudTree(ON_RTree* pTree, const ON_PointCloud* pConstCloud)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RTree_CreatePointCloudTree(IntPtr pTree, IntPtr pConstCloud);

  //bool ON_RTreeSearchContext_GetBoundingBox(const ON_RTreeSearchContext* pConstContext, ON_3dPoint* p0, ON_3dPoint* p1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RTreeSearchContext_GetBoundingBox(IntPtr pConstContext, ref Point3d p0, ref Point3d p1);

  //bool ON_RTreeSearchContext_SetBoundingBox(ON_RTreeSearchContext* pContext, ON_3DPOINT_STRUCT min_pt, ON_3DPOINT_STRUCT max_pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RTreeSearchContext_SetBoundingBox(IntPtr pContext, Point3d min_pt, Point3d max_pt);

  //bool ON_RTreeSearchContext_GetSphere(const ON_RTreeSearchContext* pConstContext, ON_3dPoint* center, double* radius)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RTreeSearchContext_GetSphere(IntPtr pConstContext, ref Point3d center, ref double radius);

  //bool ON_RTreeSearchContext_SetSphere(ON_RTreeSearchContext* pContext, ON_3DPOINT_STRUCT center, double radius)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RTreeSearchContext_SetSphere(IntPtr pContext, Point3d center, double radius);

  //bool ON_RTree_Search(const ON_RTree* pConstTree, ON_3DPOINT_STRUCT pt0, ON_3DPOINT_STRUCT pt1, int serial_number, RTREESEARCHPROC searchCB)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //bool ON_RTree_SearchSphere(const ON_RTree* pConstTree, ON_3DPOINT_STRUCT center, double radius, int serial_number, RTREESEARCHPROC searchCB)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //bool ON_RTree_Search2(const ON_RTree* pConstTreeA, const ON_RTree* pConstTreeB, double tolerance, int serial_number, RTREESEARCHPROC searchCB)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //bool ON_RTree_InsertRemove(ON_RTree* pTree, bool insert, ON_3DPOINT_STRUCT pt0, ON_3DPOINT_STRUCT pt1, void* elementId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RTree_InsertRemove(IntPtr pTree, [MarshalAs(UnmanagedType.U1)]bool insert, Point3d pt0, Point3d pt1, IntPtr elementId);

  //void ON_RTree_RemoveAll(ON_RTree* pTree)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_RTree_RemoveAll(IntPtr pTree);

  //unsigned int ON_RTree_SizeOf(const ON_RTree* pConstTree)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint ON_RTree_SizeOf(IntPtr pConstTree);

  //int ON_RTree_ElementCount(ON_RTree* pTree)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_RTree_ElementCount(IntPtr pTree);
  #endregion


  #region on_sphere.cpp
  //ON_NurbsSurface* ON_Sphere_GetNurbsForm(ON_Sphere* sphere)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Sphere_GetNurbsForm(ref Sphere sphere);

  //ON_RevSurface* ON_Sphere_RevSurfaceForm(ON_Sphere* sphere)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Sphere_RevSurfaceForm(ref Sphere sphere);

  //ON_NurbsSurface* ON_Cone_GetNurbForm(ON_Cone* cone)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Cone_GetNurbForm(ref Cone cone);

  //ON_RevSurface* ON_Cone_RevSurfaceForm(ON_Cone* cone)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Cone_RevSurfaceForm(ref Cone cone);

  //ON_NurbsSurface* ON_Cylinder_GetNurbForm(ON_Cylinder* cylinder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Cylinder_GetNurbForm(ref Cylinder cylinder);

  //ON_RevSurface* ON_Cylinder_RevSurfaceForm(ON_Cylinder* cylinder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Cylinder_RevSurfaceForm(ref Cylinder cylinder);

  //ON_NurbsSurface* ON_Torus_GetNurbForm(ON_Torus* torus)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Torus_GetNurbForm(ref Torus torus);

  //ON_RevSurface* ON_Torus_RevSurfaceForm(ON_Torus* torus)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Torus_RevSurfaceForm(ref Torus torus);
  #endregion


  #region on_surface.cpp
  //ON_Surface* ON_Surface_DuplicateSurface(ON_Surface* pSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_DuplicateSurface(IntPtr pSurface);

  //ON_Brep* ON_Surface_BrepForm(const ON_Surface* pConstSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_BrepForm(IntPtr pConstSurface);

  //void ON_Surface_Domain( const ON_Surface* pConstSurface, int dir, ON_Interval* pDomain )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Surface_Domain(IntPtr pConstSurface, int dir, ref Interval pDomain);

  //bool ON_Surface_SetDomain(ON_Surface* pSurface, int direction, ON_INTERVAL_STRUCT domain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_SetDomain(IntPtr pSurface, int direction, Interval domain);

  //int ON_Surface_SpanCount(const ON_Surface* pConstSurface, int direction)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_SpanCount(IntPtr pConstSurface, int direction);

  //bool ON_Surface_GetSpanVector(const ON_Surface* pConstSurface, int direction, /*ARRAY*/double* span_vector)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_GetSpanVector(IntPtr pConstSurface, int direction, [In,Out] double[] span_vector);

  //int ON_Surface_Degree(const ON_Surface* pConstSurface, int direction)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_Degree(IntPtr pConstSurface, int direction);

  //int ON_Surface_IsIsoparametric(const ON_Surface* pConstSurface, const ON_Curve* pCurve, ON_INTERVAL_STRUCT curveDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_IsIsoparametric(IntPtr pConstSurface, IntPtr pCurve, Interval curveDomain);

  //int ON_Surface_IsIsoparametric2(const ON_Surface* pConstSurface, ON_3DPOINT_STRUCT bbox_min, ON_3DPOINT_STRUCT bbox_max)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_IsIsoparametric2(IntPtr pConstSurface, Point3d bbox_min, Point3d bbox_max);

  //bool ON_Surface_IsPlanar( const ON_Surface* pConstSurface, ON_PLANE_STRUCT* plane, double tolerance, bool computePlane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsPlanar(IntPtr pConstSurface, ref Plane plane, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computePlane);

  //bool ON_Surface_IsSphere( const ON_Surface* pConstSurface, ON_Sphere* sphere, double tolerance, bool computeSphere)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsSphere(IntPtr pConstSurface, ref Sphere sphere, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computeSphere);

  //bool ON_Surface_IsCylinder( const ON_Surface* pConstSurface, ON_Cylinder* cylinder, double tolerance, bool computeCylinder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsCylinder(IntPtr pConstSurface, ref Cylinder cylinder, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computeCylinder);

  //bool ON_Surface_IsCone( const ON_Surface* pConstSurface, ON_Cone* cone, double tolerance, bool computeCone)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsCone(IntPtr pConstSurface, ref Cone cone, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computeCone);

  //bool ON_Surface_IsTorus( const ON_Surface* pConstSurface, ON_Torus* torus, double tolerance, bool computeTorus)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsTorus(IntPtr pConstSurface, ref Torus torus, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computeTorus);

  //bool ON_Surface_GetBool(const ON_Surface* pConstSurface, int direction, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_GetBool(IntPtr pConstSurface, int direction, int which);

  //bool ON_Surface_IsAtSingularity(const ON_Surface* pConstSurface, double s, double t, bool exact)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsAtSingularity(IntPtr pConstSurface, double s, double t, [MarshalAs(UnmanagedType.U1)]bool exact);

  //int ON_Surface_IsAtSeam(const ON_Surface* pConstSurface, double s, double t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_IsAtSeam(IntPtr pConstSurface, double s, double t);

  //bool ON_Surface_GetNextDiscontinuity(const ON_Surface* pConstSurface, int direction, int continuityType, double t0, double t1, double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_GetNextDiscontinuity(IntPtr pConstSurface, int direction, int continuityType, double t0, double t1, ref double t);

  //bool ON_Surface_IsContinuous(const ON_Surface* pConstSurface, int continuityType, double s, double t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsContinuous(IntPtr pConstSurface, int continuityType, double s, double t);

  //void ON_Surface_NormalAt(const ON_Surface* pConstSurface, double u, double v, ON_3dVector* vector)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Surface_NormalAt(IntPtr pConstSurface, double u, double v, ref Vector3d vector);

  //bool ON_Surface_FrameAt(const ON_Surface* pConstSurface, double u, double v, ON_PLANE_STRUCT* frame)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_FrameAt(IntPtr pConstSurface, double u, double v, ref Plane frame);

  //ON_Surface* ON_Surface_Trim(const ON_Surface* pConstSurface, ON_INTERVAL_STRUCT u_domain, ON_INTERVAL_STRUCT v_domain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_Trim(IntPtr pConstSurface, Interval u_domain, Interval v_domain);

  //ON_Curve* ON_Surface_IsoCurve(const ON_Surface* pConstSurface, int direction, double constantParameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_IsoCurve(IntPtr pConstSurface, int direction, double constantParameter);

  //int ON_Surface_HasNurbsForm(const ON_Surface* pConstSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_HasNurbsForm(IntPtr pConstSurface);

  //bool ON_Surface_EvPoint( const ON_Surface* pConstSurface, double s, double t, ON_3dPoint* point )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_EvPoint(IntPtr pConstSurface, double s, double t, ref Point3d point);

  //bool ON_Surface_EvCurvature( const ON_Surface* pConstSurface, 
  //                                           double s, double t, 
  //                                           ON_3dPoint* point, 
  //                                           ON_3dVector* normal, 
  //                                           ON_3dVector* kappa1, 
  //                                           ON_3dVector* kappa2, 
  //                                           double* gauss, 
  //                                           double* mean, 
  //                                           double* k1,
  //                                           double* k2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_EvCurvature(IntPtr pConstSurface, double s, double t, ref Point3d point, ref Vector3d normal, ref Vector3d kappa1, ref Vector3d kappa2, ref double gauss, ref double mean, ref double k1, ref double k2);

  //ON_NurbsSurface* ON_Surface_GetNurbForm(ON_Surface* pSurface, double tolerance, int* accuracy)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_GetNurbForm(IntPtr pSurface, double tolerance, ref int accuracy);

  //ON_Surface* ON_Surface_Reverse( const ON_Surface* pConstSurface, int direction )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_Reverse(IntPtr pConstSurface, int direction);

  //bool ON_Surface_Reverse2( ON_Surface* pSurface, int direction )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_Reverse2(IntPtr pSurface, int direction);

  //ON_Surface* ON_Surface_Transpose( const ON_Surface* pConstSurface )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_Transpose(IntPtr pConstSurface);

  //bool ON_Surface_Transpose2( ON_Surface* pSurface )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_Transpose2(IntPtr pSurface);

  //void ON_Surface_Split(const ON_Surface* pConstSurface, int direction, double c, ON_SimpleArray<ON_Surface*>* pSurfaceArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Surface_Split(IntPtr pConstSurface, int direction, double c, IntPtr pSurfaceArray);

  //bool ON_Surface_Evaluate(const ON_Surface* pConstSurface, double u, double v, int numDer, int stride, /*ARRAY*/double* der_array)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_Evaluate(IntPtr pConstSurface, double u, double v, int numDer, int stride, [In,Out] double[] der_array);

  //ON_RevSurface* ON_RevSurface_Create(const ON_Curve* pConstProfile, const ON_Line* axis, double startAngle, double endAngle )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_RevSurface_Create(IntPtr pConstProfile, ref Line axis, double startAngle, double endAngle);

  //ON_SumSurface* ON_SumSurface_Create(const ON_Curve* pConstCurveA, const ON_Curve* pConstCurveB)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_SumSurface_Create(IntPtr pConstCurveA, IntPtr pConstCurveB);
  #endregion


  #region on_textlog.cpp
  //ON_TextLog* ON_TextLog_New(ON_wString* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_TextLog_New(IntPtr pString);

  //void ON_TextLog_Delete(ON_TextLog* pTextLog)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextLog_Delete(IntPtr pTextLog);

  //ON_TextLog* ON_TextLog_New2(const RHMONO_STRING* _filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_TextLog_New2([MarshalAs(UnmanagedType.LPWStr)]string _filename);

  //void ON_TextLog_PushPopIndent(ON_TextLog* pTextLog, bool push)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextLog_PushPopIndent(IntPtr pTextLog, [MarshalAs(UnmanagedType.U1)]bool push);

  //int ON_TextLog_IndentSize_Get(const ON_TextLog* pConstTextLog)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_TextLog_IndentSize_Get(IntPtr pConstTextLog);

  //void ON_TextLog_IndentSize_Set(ON_TextLog* pTextLog, int s)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextLog_IndentSize_Set(IntPtr pTextLog, int s);

  //void ON_TextLog_PrintWrappedText(ON_TextLog* pTextLog, const RHMONO_STRING* _text, int line_length)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextLog_PrintWrappedText(IntPtr pTextLog, [MarshalAs(UnmanagedType.LPWStr)]string _text, int line_length);

  //void ON_TextLog_Print(ON_TextLog* pTextLog, const RHMONO_STRING* _text)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextLog_Print(IntPtr pTextLog, [MarshalAs(UnmanagedType.LPWStr)]string _text);
  #endregion


  #region on_userdata.cpp
  //void ON_UserData_OnTransform(ON_UserData* pUserData, const ON_Xform* xform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UserData_OnTransform(IntPtr pUserData, ref Transform xform);

  //void ON_UserData_RegisterCustomUserData( const RHMONO_STRING* managed_type_name, ON_UUID managed_type_id )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UserData_RegisterCustomUserData([MarshalAs(UnmanagedType.LPWStr)]string managed_type_name, Guid managed_type_id);

  //CRhCmnUserData* CRhCmnUserData_New( int serial_number, ON_UUID managed_type_id, ON_UUID plugin_id, const RHMONO_STRING* description)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhCmnUserData_New(int serial_number, Guid managed_type_id, Guid plugin_id, [MarshalAs(UnmanagedType.LPWStr)]string description);

  //bool CRhCmnUserData_Delete(ON_UserData* pUserData, bool only_if_no_parent)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhCmnUserData_Delete(IntPtr pUserData, [MarshalAs(UnmanagedType.U1)]bool only_if_no_parent);

  //int CRhCmnUserData_Find(const ON_Object* pConstOnObject, ON_UUID managed_type_id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhCmnUserData_Find(IntPtr pConstOnObject, Guid managed_type_id);

  //void CRhCmnUserData_SetCallbacks(USERDATATRANSFORMPROC xform_proc,
  //                                               USERDATAARCHIVEPROC archive_proc,
  //                                               USERDATAIOPROC io_proc,
  //                                               USERDATADUPLICATEPROC duplicate_proc,
  //                                               USERDATACREATEPROC create_proc,
  //                                               USERDATADELETEPROC delete_proc)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //bool ON_UserDataHolder_MoveUserDataFrom( ON_UUID id, const ON_Object* pConstObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_UserDataHolder_MoveUserDataFrom(Guid id, IntPtr pConstObject);

  //void ON_UserDataHolder_MoveUserDataTo( ON_UUID id, const ON_Object* pConstObject, bool append)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UserDataHolder_MoveUserDataTo(Guid id, IntPtr pConstObject, [MarshalAs(UnmanagedType.U1)]bool append);

  //void ON_UserData_GetTransform(const ON_UserData* pConstUserData, ON_Xform* transform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UserData_GetTransform(IntPtr pConstUserData, ref Transform transform);

  //void ON_UserData_SetTransform(ON_UserData* pUserData, const ON_Xform* transform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UserData_SetTransform(IntPtr pUserData, ref Transform transform);
  #endregion


  #region on_viewport.cpp
  //ON_Viewport* ON_Viewport_New(const ON_Viewport* pVP)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Viewport_New(IntPtr pVP);

  //bool ON_Viewport_GetBool(const ON_Viewport* pConstViewport, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetBool(IntPtr pConstViewport, int which);

  //void ON_Viewport_SetProjection(ON_Viewport* pViewport, bool parallel)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_SetProjection(IntPtr pViewport, [MarshalAs(UnmanagedType.U1)]bool parallel);

  //bool ON_Viewport_ChangeToParallelProjection(ON_Viewport* pVP, bool symmetricFrustum)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_ChangeToParallelProjection(IntPtr pVP, [MarshalAs(UnmanagedType.U1)]bool symmetricFrustum);

  //bool ON_Viewport_ChangeToPerspectiveProjection(ON_Viewport* pVP, double targetDistance, bool symmetricFrustum, double lensLength)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_ChangeToPerspectiveProjection(IntPtr pVP, double targetDistance, [MarshalAs(UnmanagedType.U1)]bool symmetricFrustum, double lensLength);

  //bool ON_Viewport_ChangeToTwoPointPerspectiveProjection(ON_Viewport* pVP, double targetDistance, ON_3DVECTOR_STRUCT up, double lensLength)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_ChangeToTwoPointPerspectiveProjection(IntPtr pVP, double targetDistance, Vector3d up, double lensLength);

  //void ON_Viewport_CameraLocation(const ON_Viewport* pVP, ON_3dPoint* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_CameraLocation(IntPtr pVP, ref Point3d p);

  //void ON_Viewport_CameraDirection(const ON_Viewport* pVP, ON_3dVector* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_CameraDirection(IntPtr pVP, ref Vector3d p);

  //bool ON_Viewport_SetCameraDirection(ON_Viewport* pVP, ON_3DVECTOR_STRUCT v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetCameraDirection(IntPtr pVP, Vector3d v);

  //bool ON_Viewport_SetCameraLocation(ON_Viewport* pVP, ON_3DPOINT_STRUCT v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetCameraLocation(IntPtr pVP, Point3d v);

  //void ON_Viewport_CameraUp(const ON_Viewport* pVP, ON_3dVector* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_CameraUp(IntPtr pVP, ref Vector3d p);

  //bool ON_Viewport_SetCameraUp(ON_Viewport* pVP, ON_3DVECTOR_STRUCT v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetCameraUp(IntPtr pVP, Vector3d v);

  //void ON_Viewport_SetLocked(ON_Viewport* pViewport, int which, bool b)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_SetLocked(IntPtr pViewport, int which, [MarshalAs(UnmanagedType.U1)]bool b);

  //void ON_Viewport_SetIsFrustumSymmetry(ON_Viewport* pViewport, bool leftright, bool b)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_SetIsFrustumSymmetry(IntPtr pViewport, [MarshalAs(UnmanagedType.U1)]bool leftright, [MarshalAs(UnmanagedType.U1)]bool b);

  //void ON_Viewport_Unlock(ON_Viewport* pViewport, bool camera)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_Unlock(IntPtr pViewport, [MarshalAs(UnmanagedType.U1)]bool camera);

  //bool ON_Viewport_GetCameraFrame(const ON_Viewport* pVP, ON_3dPoint* location, ON_3dVector* cameraX, ON_3dVector* cameraY, ON_3dVector* cameraZ)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetCameraFrame(IntPtr pVP, ref Point3d location, ref Vector3d cameraX, ref Vector3d cameraY, ref Vector3d cameraZ);

  //void ON_Viewport_CameraAxis(const ON_Viewport* pConstViewport, int iAxis, ON_3dVector* v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_CameraAxis(IntPtr pConstViewport, int iAxis, ref Vector3d v);

  //bool ON_Viewport_GetCameraExtents(const ON_Viewport* pConstViewport, int count, /*ARRAY*/const ON_3dPoint* points, ON_BoundingBox* bbox)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetCameraExtents(IntPtr pConstViewport, int count, Point3d[] points, ref BoundingBox bbox);

  //bool ON_Viewport_SetFrustum(ON_Viewport* pViewport, double left, double right, double bottom, double top, double nearDistance, double farDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetFrustum(IntPtr pViewport, double left, double right, double bottom, double top, double nearDistance, double farDistance);

  //bool ON_Viewport_GetFrustum(const ON_Viewport* pConstViewport, double* left, double* right, double* bottom, double* top, double* nearDistance, double* farDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetFrustum(IntPtr pConstViewport, ref double left, ref double right, ref double bottom, ref double top, ref double nearDistance, ref double farDistance);

  //bool ON_Viewport_GetFrustrumAspect(const ON_Viewport* pVP, double* dAspect)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetFrustrumAspect(IntPtr pVP, ref double dAspect);

  //int ON_Viewport_SetFrustumAspect(ON_Viewport* pVP, double d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Viewport_SetFrustumAspect(IntPtr pVP, double d);

  //int ON_Viewport_GetFrustumCenter(const ON_Viewport* pVP, ON_3dPoint* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Viewport_GetFrustumCenter(IntPtr pVP, ref Point3d p);

  //double ON_Viewport_GetDouble(const ON_Viewport* pConstViewport, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Viewport_GetDouble(IntPtr pConstViewport, int which);

  //bool ON_Viewport_SetFrustumNearFarBoundingBox(ON_Viewport* pVP, ON_3DPOINT_STRUCT min, ON_3DPOINT_STRUCT max)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetFrustumNearFarBoundingBox(IntPtr pVP, Point3d min, Point3d max);

  //bool ON_Viewport_SetFrustumNearFarSphere(ON_Viewport* pVP, ON_3DPOINT_STRUCT center, double radius)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetFrustumNearFarSphere(IntPtr pVP, Point3d center, double radius);

  //bool ON_Viewport_SetFrustumNearFar(ON_Viewport* pVP, double nearDistance, double farDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetFrustumNearFar(IntPtr pVP, double nearDistance, double farDistance);

  //bool ON_Viewport_ChangeToSymmetricFrustum(ON_Viewport* pVP, bool isLeftRightSymmetric, bool isTopBottomSymmetric, double targetDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_ChangeToSymmetricFrustum(IntPtr pVP, [MarshalAs(UnmanagedType.U1)]bool isLeftRightSymmetric, [MarshalAs(UnmanagedType.U1)]bool isTopBottomSymmetric, double targetDistance);

  //bool ON_Viewport_GetPointDepth(const ON_Viewport* pVP, 
  //											ON_3DPOINT_STRUCT point, 
  //											double* nearDistance, 
  //											double* farDistance, 
  //											bool growNearFar)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetPointDepth(IntPtr pVP, Point3d point, ref double nearDistance, ref double farDistance, [MarshalAs(UnmanagedType.U1)]bool growNearFar);

  //bool ON_Viewport_GetBoundingBoxDepth(const ON_Viewport* pVP, 
  //												   ON_3DPOINT_STRUCT min, 
  //												   ON_3DPOINT_STRUCT max, 
  //												   double* nearDistance, 
  //												   double* farDistance, 
  //												   bool growNearFar)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetBoundingBoxDepth(IntPtr pVP, Point3d min, Point3d max, ref double nearDistance, ref double farDistance, [MarshalAs(UnmanagedType.U1)]bool growNearFar);

  //bool ON_Viewport_GetSphereDepth(const ON_Viewport* pVP, 
  //											 ON_3DPOINT_STRUCT center, 
  //											 double radius, 
  //											 double* nearDistance,
  //											 double* farDistance, 
  //											 bool growNearFar)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetSphereDepth(IntPtr pVP, Point3d center, double radius, ref double nearDistance, ref double farDistance, [MarshalAs(UnmanagedType.U1)]bool growNearFar);

  //bool ON_Viewport_SetFrustrumNearFar(ON_Viewport* pVP,
  //												 double nearDistance, 
  //												 double farDistance, 
  //												 double minNearDistance, 
  //												 double minNearOverFar, 
  //												 double targetDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetFrustrumNearFar(IntPtr pVP, double nearDistance, double farDistance, double minNearDistance, double minNearOverFar, double targetDistance);

  //bool ON_Viewport_GetPlane(const ON_Viewport* pConstViewport, int which, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetPlane(IntPtr pConstViewport, int which, ref Plane plane);

  //bool ON_Viewport_GetNearFarRect(const ON_Viewport* pConstViewport, bool _near,
  //										   ON_3dPoint* leftBottom, ON_3dPoint* rightBottom, ON_3dPoint* leftTop, ON_3dPoint* rightTop)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetNearFarRect(IntPtr pConstViewport, [MarshalAs(UnmanagedType.U1)]bool _near, ref Point3d leftBottom, ref Point3d rightBottom, ref Point3d leftTop, ref Point3d rightTop);

  //bool ON_Viewport_SetScreenPort(ON_Viewport* pVP, int left, int right, int bottom, int top, int _near, int _far)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetScreenPort(IntPtr pVP, int left, int right, int bottom, int top, int _near, int _far);

  //bool ON_Viewport_GetScreenPort(const ON_Viewport* pConstViewport, int* left, int* right, int* bottom, int* top, int* _near, int* _far)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetScreenPort(IntPtr pConstViewport, ref int left, ref int right, ref int bottom, ref int top, ref int _near, ref int _far);

  //bool ON_Viewport_GetScreenPortAspect(const ON_Viewport* pConstViewport, double* dAspect)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetScreenPortAspect(IntPtr pConstViewport, ref double dAspect);

  //bool ON_Viewport_GetCameraAngle2(const ON_Viewport* pConstViewport, double* halfDiagonalAngle, double* halfVerticalAngle, double* halfHorizontalAngle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetCameraAngle2(IntPtr pConstViewport, ref double halfDiagonalAngle, ref double halfVerticalAngle, ref double halfHorizontalAngle);

  //bool ON_Viewport_GetCameraAngle(const ON_Viewport* pConstViewport, double* d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetCameraAngle(IntPtr pConstViewport, ref double d);

  //bool ON_Viewport_SetCameraAngle(ON_Viewport* pVP, double d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetCameraAngle(IntPtr pVP, double d);

  //bool ON_Viewport_GetCamera35mmLensLength(const ON_Viewport* pConstViewport, double* d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetCamera35mmLensLength(IntPtr pConstViewport, ref double d);

  //bool ON_Viewport_SetCamera35mmLensLength(ON_Viewport* pVP, double d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_SetCamera35mmLensLength(IntPtr pVP, double d);

  //bool ON_Viewport_GetXform(const ON_Viewport* pConstViewport, int sourceCoordSystem, int destinationCoordSystem, ON_Xform* matrix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetXform(IntPtr pConstViewport, int sourceCoordSystem, int destinationCoordSystem, ref Transform matrix);

  //bool ON_Viewport_GetFrustumLine(const ON_Viewport* pConstViewport, double screenX, double screenY, ON_Line* line)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetFrustumLine(IntPtr pConstViewport, double screenX, double screenY, ref Line line);

  //bool ON_Viewport_GetWorldToScreenScale(const ON_Viewport* pConstViewport, ON_3DPOINT_STRUCT pointInFrustum, double* pixels_per_unit)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetWorldToScreenScale(IntPtr pConstViewport, Point3d pointInFrustum, ref double pixels_per_unit);

  //bool ON_Viewport_ExtentsBBox(ON_Viewport* pVP, double halfViewAngle, ON_3DPOINT_STRUCT min, ON_3DPOINT_STRUCT max)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_ExtentsBBox(IntPtr pVP, double halfViewAngle, Point3d min, Point3d max);

  //bool ON_Viewport_ExtentsSphere(ON_Viewport* pVP, double halfViewAngle, ON_3DPOINT_STRUCT center, double radius)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_ExtentsSphere(IntPtr pVP, double halfViewAngle, Point3d center, double radius);

  //bool ON_Viewport_ZoomToScreenRect(ON_Viewport* pVP, int left, int top, int right, int bottom)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_ZoomToScreenRect(IntPtr pVP, int left, int top, int right, int bottom);

  //bool ON_Viewport_DollyCamera(ON_Viewport* pVP, ON_3DVECTOR_STRUCT dollyVector)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_DollyCamera(IntPtr pVP, Vector3d dollyVector);

  //bool ON_Viewport_GetDollyCameraVector(const ON_Viewport* pConstViewport, 
  //													int screenX0, 
  //													int screenY0, 
  //													int screenX1, 
  //													int screenY1, 
  //													double projectionPlaneDistance, 
  //													ON_3dVector* v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_GetDollyCameraVector(IntPtr pConstViewport, int screenX0, int screenY0, int screenX1, int screenY1, double projectionPlaneDistance, ref Vector3d v);

  //bool ON_Viewport_DollyFrustum(ON_Viewport* pVP, double dollyDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_DollyFrustum(IntPtr pVP, double dollyDistance);

  //void ON_Viewport_GetViewScale(const ON_Viewport* pConstViewport, double* w, double* h)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_GetViewScale(IntPtr pConstViewport, ref double w, ref double h);

  //void ON_Viewport_SetViewScale(ON_Viewport* pVP, double w, double h)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_SetViewScale(IntPtr pVP, double w, double h);

  //void ON_Viewport_ClipModXform(const ON_Viewport* pConstViewport, ON_Xform* matrix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_ClipModXform(IntPtr pConstViewport, ref Transform matrix);

  //void ON_Viewport_ClipModInverseXform(const ON_Viewport* pConstViewport, ON_Xform* matrix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_ClipModInverseXform(IntPtr pConstViewport, ref Transform matrix);

  //bool ON_Viewport_ClipModXformIsIdentity(const ON_Viewport* pConstViewport)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_ClipModXformIsIdentity(IntPtr pConstViewport);

  //void ON_Viewport_FrustumCenterPoint(const ON_Viewport* pConstViewport, double targetDistance, ON_3dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_FrustumCenterPoint(IntPtr pConstViewport, double targetDistance, ref Point3d point);

  //void ON_Viewport_TargetPoint(const ON_Viewport* pConstViewport, ON_3dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_TargetPoint(IntPtr pConstViewport, ref Point3d point);

  //void ON_Viewport_SetTargetPoint(ON_Viewport* pVP, ON_3DPOINT_STRUCT point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_SetTargetPoint(IntPtr pVP, Point3d point);

  //double ON_Viewport_TargetDistance(const ON_Viewport* pConstViewport, bool useFrustumCenterFallback)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Viewport_TargetDistance(IntPtr pConstViewport, [MarshalAs(UnmanagedType.U1)]bool useFrustumCenterFallback);

  //void ON_Viewport_GetPerspectiveClippingPlaneConstraints(ON_3DPOINT_STRUCT cameraLocation, 
  //																	  int depthBufferBitDepth, double* minNearDist, double* minNearOverFar)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_GetPerspectiveClippingPlaneConstraints(Point3d cameraLocation, int depthBufferBitDepth, ref double minNearDist, ref double minNearOverFar);

  //void ON_Viewport_SetPerspectiveClippingPlaneConstraints(ON_Viewport* pVP, int depthBufferBitDepth)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_SetPerspectiveClippingPlaneConstraints(IntPtr pVP, int depthBufferBitDepth);

  //double ON_Viewport_GetPerspectiveMinNearOverFar(const ON_Viewport* pVP)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Viewport_GetPerspectiveMinNearOverFar(IntPtr pVP);

  //int ON_Viewport_SetPerspectiveMinNearOverFar(ON_Viewport* pVP, double d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Viewport_SetPerspectiveMinNearOverFar(IntPtr pVP, double d);

  //double ON_Viewport_GetPerspectiveMinNearDist(const ON_Viewport* pVP)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Viewport_GetPerspectiveMinNearDist(IntPtr pVP);

  //int ON_Viewport_SetPerspectiveMinNearDist(ON_Viewport* pVP, double d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Viewport_SetPerspectiveMinNearDist(IntPtr pVP, double d);

  //ON_UUID ON_Viewport_GetViewportId(const ON_Viewport* pVP)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_Viewport_GetViewportId(IntPtr pVP);

  //int ON_Viewport_SetViewportId(ON_Viewport* pVP, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Viewport_SetViewportId(IntPtr pVP, Guid id);

  //void ON_Viewport_Delete(ON_Viewport* pVP)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Viewport_Delete(IntPtr pVP);

  //bool ON_Viewport_DollyExtents(ON_Viewport* pViewport, ON_3DPOINT_STRUCT camboxmin, ON_3DPOINT_STRUCT camboxmax)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Viewport_DollyExtents(IntPtr pViewport, Point3d camboxmin, Point3d camboxmax);
  #endregion


  #region on_xform.cpp
  //void ON_Xform_Scale( ON_Xform* xf, const ON_PLANE_STRUCT* plane, double xFactor, double yFactor, double zFactor )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_Scale(ref Transform xf, ref Plane plane, double xFactor, double yFactor, double zFactor);

  //void ON_Xform_Rotation( ON_Xform* xf, double sinAngle, double cosAngle, ON_3DVECTOR_STRUCT rotationAxis, ON_3DPOINT_STRUCT rotationCenter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_Rotation(ref Transform xf, double sinAngle, double cosAngle, Vector3d rotationAxis, Point3d rotationCenter);

  //bool ON_Xform_PlaneToPlane( ON_Xform* xf, const ON_PLANE_STRUCT* plane0, const ON_PLANE_STRUCT* plane1, bool rotation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Xform_PlaneToPlane(ref Transform xf, ref Plane plane0, ref Plane plane1, [MarshalAs(UnmanagedType.U1)]bool rotation);

  //void ON_Xform_Mirror( ON_Xform* xf, ON_3DPOINT_STRUCT pointOnMirrorPlane, ON_3DVECTOR_STRUCT normalToMirrorPlane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_Mirror(ref Transform xf, Point3d pointOnMirrorPlane, Vector3d normalToMirrorPlane);

  //bool ON_Xform_ChangeBasis2( ON_Xform* xf,
  //                                          ON_3DVECTOR_STRUCT x0, ON_3DVECTOR_STRUCT y0, ON_3DVECTOR_STRUCT z0,
  //                                          ON_3DVECTOR_STRUCT x1, ON_3DVECTOR_STRUCT y1, ON_3DVECTOR_STRUCT z1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Xform_ChangeBasis2(ref Transform xf, Vector3d x0, Vector3d y0, Vector3d z0, Vector3d x1, Vector3d y1, Vector3d z1);

  //void ON_Xform_PlanarProjection(ON_Xform* xf, const ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_PlanarProjection(ref Transform xf, ref Plane plane);

  //void ON_Xform_Shear(ON_Xform* xf, 
  //                                  const ON_PLANE_STRUCT* plane, 
  //                                  ON_3DVECTOR_STRUCT x, 
  //                                  ON_3DVECTOR_STRUCT y, 
  //                                  ON_3DVECTOR_STRUCT z)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_Shear(ref Transform xf, ref Plane plane, Vector3d x, Vector3d y, Vector3d z);

  //int ON_Xform_IsSimilarity(const ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Xform_IsSimilarity(ref Transform xf);

  //double ON_Xform_Determinant(const ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Xform_Determinant(ref Transform xf);

  //bool ON_Xform_Invert( ON_Xform* xf )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Xform_Invert(ref Transform xf);

  //void ON_SpaceMorph_Delete(ON_SpaceMorph* pSpaceMorph)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_SpaceMorph_Delete(IntPtr pSpaceMorph);

  //ON_Matrix* ON_Matrix_New(int rows, int cols)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Matrix_New(int rows, int cols);

  //ON_Matrix* ON_Matrix_New2(const ON_Xform* pXform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Matrix_New2(ref Transform pXform);

  //void ON_Matrix_Delete(ON_Matrix* pMatrix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Matrix_Delete(IntPtr pMatrix);

  //double ON_Matrix_GetValue(const ON_Matrix* pConstMatrix, int row, int column)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Matrix_GetValue(IntPtr pConstMatrix, int row, int column);

  //void ON_Matrix_SetValue(ON_Matrix* pMatrix, int row, int column, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Matrix_SetValue(IntPtr pMatrix, int row, int column, double val);

  //void ON_Matrix_Zero(ON_Matrix* pMatrix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Matrix_Zero(IntPtr pMatrix);

  //void ON_Matrix_SetDiagonal(ON_Matrix* pMatrix, double value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Matrix_SetDiagonal(IntPtr pMatrix, double value);

  //bool ON_Matrix_Transpose(ON_Matrix* pMatrix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Matrix_Transpose(IntPtr pMatrix);

  //bool ON_Matrix_Swap(ON_Matrix* pMatrix, bool swaprows, int a, int b)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Matrix_Swap(IntPtr pMatrix, [MarshalAs(UnmanagedType.U1)]bool swaprows, int a, int b);

  //bool ON_Matrix_Invert(ON_Matrix* pMatrix, double zeroTolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Matrix_Invert(IntPtr pMatrix, double zeroTolerance);

  //void ON_Matrix_Multiply(ON_Matrix* pMatrixRC, const ON_Matrix* pConstMatrixA, const ON_Matrix* pConstMatrixB)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Matrix_Multiply(IntPtr pMatrixRC, IntPtr pConstMatrixA, IntPtr pConstMatrixB);

  //void ON_Matrix_Add(ON_Matrix* pMatrixRC, const ON_Matrix* pConstMatrixA, const ON_Matrix* pConstMatrixB)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Matrix_Add(IntPtr pMatrixRC, IntPtr pConstMatrixA, IntPtr pConstMatrixB);

  //void ON_Matrix_Scale(ON_Matrix* pMatrix, double scale)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Matrix_Scale(IntPtr pMatrix, double scale);

  //int ON_Matrix_RowReduce(ON_Matrix* pMatrix, double zero_tol, double* determinant, double* pivot)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Matrix_RowReduce(IntPtr pMatrix, double zero_tol, ref double determinant, ref double pivot);

  //int ON_Matrix_RowReduce2(ON_Matrix* pMatrix, double zero_tol, /*ARRAY*/double* b, double* pivot)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Matrix_RowReduce2(IntPtr pMatrix, double zero_tol, [In,Out] double[] b, ref double pivot);

  //int ON_Matrix_RowReduce3(ON_Matrix* pMatrix, double zero_tol, /*ARRAY*/ON_3dPoint* b, double* pivot)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Matrix_RowReduce3(IntPtr pMatrix, double zero_tol, [In,Out] Point3d[] b, ref double pivot);

  //bool ON_Matrix_BackSolve(ON_Matrix* pMatrix, double zero_tol, int bSize, /*ARRAY*/const double* b, /*ARRAY*/double* x)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Matrix_BackSolve(IntPtr pMatrix, double zero_tol, int bSize, double[] b, [In,Out] double[] x);

  //bool ON_Matrix_BackSolve2(ON_Matrix* pMatrix, double zero_tol, int bSize, /*ARRAY*/const ON_3dPoint* b, /*ARRAY*/ON_3dPoint* x)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Matrix_BackSolve2(IntPtr pMatrix, double zero_tol, int bSize, Point3d[] b, [In,Out] Point3d[] x);

  //bool ON_Matrix_GetBool(const ON_Matrix* pConstMatrix, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Matrix_GetBool(IntPtr pConstMatrix, int which);
  #endregion


}
